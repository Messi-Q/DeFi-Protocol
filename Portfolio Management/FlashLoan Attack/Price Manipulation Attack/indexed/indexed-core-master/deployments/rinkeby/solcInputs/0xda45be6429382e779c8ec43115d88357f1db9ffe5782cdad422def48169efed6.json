{
  "language": "Solidity",
  "sources": {
    "deploy-contracts/interfaces/IIndexPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\ninterface IIndexPool {\n  /**\n   * @dev Token record data structure\n   * @param bound is token bound to pool\n   * @param ready has token been initialized\n   * @param lastDenormUpdate timestamp of last denorm change\n   * @param denorm denormalized weight\n   * @param desiredDenorm desired denormalized weight (used for incremental changes)\n   * @param index index of address in tokens array\n   * @param balance token balance\n   */\n  struct Record {\n    bool bound;\n    bool ready;\n    uint40 lastDenormUpdate;\n    uint96 denorm;\n    uint96 desiredDenorm;\n    uint8 index;\n    uint256 balance;\n  }\n\n  event LOG_SWAP(\n    address indexed caller,\n    address indexed tokenIn,\n    address indexed tokenOut,\n    uint256 tokenAmountIn,\n    uint256 tokenAmountOut\n  );\n\n  event LOG_JOIN(\n    address indexed caller,\n    address indexed tokenIn,\n    uint256 tokenAmountIn\n  );\n\n  event LOG_EXIT(\n    address indexed caller,\n    address indexed tokenOut,\n    uint256 tokenAmountOut\n  );\n\n  event LOG_DENORM_UPDATED(address indexed token, uint256 newDenorm);\n\n  event LOG_DESIRED_DENORM_SET(address indexed token, uint256 desiredDenorm);\n\n  event LOG_TOKEN_REMOVED(address token);\n\n  event LOG_TOKEN_ADDED(\n    address indexed token,\n    uint256 desiredDenorm,\n    uint256 minimumBalance\n  );\n\n  event LOG_MINIMUM_BALANCE_UPDATED(address token, uint256 minimumBalance);\n\n  event LOG_TOKEN_READY(address indexed token);\n\n  event LOG_PUBLIC_SWAP_ENABLED();\n\n  event LOG_MAX_TOKENS_UPDATED(uint256 maxPoolTokens);\n\n  event LOG_SWAP_FEE_UPDATED(uint256 swapFee);\n\n  function configure(\n    address controller,\n    string calldata name,\n    string calldata symbol\n  ) external;\n\n  function initialize(\n    address[] calldata tokens,\n    uint256[] calldata balances,\n    uint96[] calldata denorms,\n    address tokenProvider,\n    address unbindHandler\n  ) external;\n\n  function setMaxPoolTokens(uint256 maxPoolTokens) external;\n\n  function setSwapFee(uint256 swapFee) external;\n\n  function reweighTokens(\n    address[] calldata tokens,\n    uint96[] calldata desiredDenorms\n  ) external;\n\n  function reindexTokens(\n    address[] calldata tokens,\n    uint96[] calldata desiredDenorms,\n    uint256[] calldata minimumBalances\n  ) external;\n\n  function setMinimumBalance(address token, uint256 minimumBalance) external;\n\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n\n  function joinswapExternAmountIn(\n    address tokenIn,\n    uint256 tokenAmountIn,\n    uint256 minPoolAmountOut\n  ) external returns (uint256/* poolAmountOut */);\n\n  function joinswapPoolAmountOut(\n    address tokenIn,\n    uint256 poolAmountOut,\n    uint256 maxAmountIn\n  ) external returns (uint256/* tokenAmountIn */);\n\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n\n  function exitswapPoolAmountIn(\n    address tokenOut,\n    uint256 poolAmountIn,\n    uint256 minAmountOut\n  )\n    external returns (uint256/* tokenAmountOut */);\n\n  function exitswapExternAmountOut(\n    address tokenOut,\n    uint256 tokenAmountOut,\n    uint256 maxPoolAmountIn\n  ) external returns (uint256/* poolAmountIn */);\n\n  function gulp(address token) external;\n\n  function flashBorrow(\n    address recipient,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external;\n\n  function swapExactAmountIn(\n    address tokenIn,\n    uint256 tokenAmountIn,\n    address tokenOut,\n    uint256 minAmountOut,\n    uint256 maxPrice\n  ) external returns (uint256/* tokenAmountOut */, uint256/* spotPriceAfter */);\n\n  function swapExactAmountOut(\n    address tokenIn,\n    uint256 maxAmountIn,\n    address tokenOut,\n    uint256 tokenAmountOut,\n    uint256 maxPrice\n  ) external returns (uint256 /* tokenAmountIn */, uint256 /* spotPriceAfter */);\n\n  function isPublicSwap() external view returns (bool);\n\n  function getSwapFee() external view returns (uint256/* swapFee */);\n\n  function getController() external view returns (address);\n\n  function getMaxPoolTokens() external view returns (uint256);\n\n  function isBound(address t) external view returns (bool);\n\n  function getNumTokens() external view returns (uint256);\n\n  function getCurrentTokens() external view returns (address[] memory tokens);\n\n  function getCurrentDesiredTokens() external view returns (address[] memory tokens);\n\n  function getDenormalizedWeight(address token) external view returns (uint256/* denorm */);\n\n  function getTokenRecord(address token) external view returns (Record memory record);\n\n  function extrapolatePoolValueFromToken() external view returns (address/* token */, uint256/* extrapolatedValue */);\n\n  function getTotalDenormalizedWeight() external view returns (uint256);\n\n  function getBalance(address token) external view returns (uint256);\n\n  function getMinimumBalance(address token) external view returns (uint256);\n\n  function getUsedBalance(address token) external view returns (uint256);\n\n  function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint256);\n}"
    },
    "deploy-contracts/interfaces/IUnboundTokenSeller.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\ninterface IUnboundTokenSeller {\n/* ========== Events ========== */\n\n  event PremiumPercentSet(uint8 premium);\n\n  event NewTokensToSell(address indexed token, uint256 amountReceived);\n\n  event SwappedTokens(\n    address indexed tokenSold,\n    address indexed tokenBought,\n    uint256 soldAmount,\n    uint256 boughtAmount\n  );\n\n/* ========== Mutative ========== */\n\n  function initialize(address pool, uint8 premiumPercent) external;\n\n  function handleUnbindToken(address token, uint256 amount) external;\n\n  function setPremiumPercent(uint8 premiumPercent) external;\n\n  function executeSwapTokensForExactTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    address[] calldata path\n  ) external returns (uint256);\n\n  function executeSwapExactTokensForTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    address[] calldata path\n  ) external returns (uint256);\n\n  function swapExactTokensForTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  ) external returns (uint256);\n\n  function swapTokensForExactTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    uint256 maxAmountIn\n  ) external returns (uint256);\n\n/* ========== Views ========== */\n\n  function getPremiumPercent() external view returns (uint8);\n\n  function calcInGivenOut(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut\n  ) external view returns (uint256);\n\n  function calcOutGivenIn(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) external view returns (uint256);\n}"
    },
    "deploy-contracts/UnboundTokenSeller.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n/* ========== External Interfaces ========== */\nimport \"@indexed-finance/uniswap-v2-oracle/contracts/interfaces/IIndexedUniswapV2Oracle.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/* ========== External Libraries ========== */\nimport \"@indexed-finance/uniswap-v2-oracle/contracts/lib/PriceLibrary.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/* ========== Internal Interfaces ========== */\nimport \"./interfaces/IIndexPool.sol\";\nimport \"./interfaces/IUnboundTokenSeller.sol\";\n\n\n/**\n * @title UnboundTokenSeller\n * @author d1ll0n\n * @dev Contract for swapping undesired tokens to desired tokens for\n * an index pool.\n *\n * This contract is deployed as a proxy for each index pool.\n *\n * When tokens are unbound from a pool, they are transferred to this\n * contract and sold on UniSwap or to anyone who calls the contract\n * in exchange for any token which is currently bound to its index pool\n * and which has a desired weight about zero.\n *\n * It uses a short-term uniswap price oracle to price swaps and has a\n * configurable premium rate which is used to decrease the expected\n * output from a swap and to reward callers for triggering a sale.\n *\n * The contract does not track the tokens it has received in order to\n * reduce gas spent by the pool contract. Tokens must be tracked via\n * events, meaning this is not well suited for trades with other smart\n * contracts.\n */\ncontract UnboundTokenSeller is IUnboundTokenSeller {\n  using SafeERC20 for IERC20;\n  using PriceLibrary for PriceLibrary.TwoWayAveragePrice;\n\n/* ==========  Constants  ========== */\n\n  uint32 internal constant SHORT_TWAP_MIN_TIME_ELAPSED = 20 minutes;\n  uint32 internal constant SHORT_TWAP_MAX_TIME_ELAPSED = 2 days;\n\n  IUniswapV2Router02 internal immutable _uniswapRouter;\n  address public immutable controller;\n  IIndexedUniswapV2Oracle public immutable oracle;\n\n/* ==========  Events  ========== */\n\n  event PremiumPercentSet(uint8 premium);\n\n  event NewTokensToSell(\n    address indexed token,\n    uint256 amountReceived\n  );\n\n  /**\n   * @param tokenSold Token sent to caller\n   * @param tokenBought Token received from caller and sent to pool\n   * @param soldAmount Amount of `tokenSold` paid to caller\n   * @param boughtAmount Amount of `tokenBought` sent to pool\n   */\n  event SwappedTokens(\n    address indexed tokenSold,\n    address indexed tokenBought,\n    uint256 soldAmount,\n    uint256 boughtAmount\n  );\n\n/* ==========  Storage  ========== */\n  // Pool the contract is selling tokens for.\n  IIndexPool internal _pool;\n  // Premium on the amount paid in swaps.\n  // Half goes to the caller, half is used to increase payments.\n  uint8 internal _premiumPercent;\n  // Reentrance lock\n  bool internal _mutex;\n\n/* ==========  Modifiers  ========== */\n\n  modifier _control_ {\n    require(msg.sender == controller, \"ERR_NOT_CONTROLLER\");\n    _;\n  }\n\n  modifier _lock_ {\n    require(!_mutex, \"ERR_REENTRY\");\n    _mutex = true;\n    _;\n    _mutex = false;\n  }\n\n  modifier _desired_(address token) {\n    IIndexPool.Record memory record = _pool.getTokenRecord(token);\n    require(record.desiredDenorm > 0, \"ERR_UNDESIRED_TOKEN\");\n    _;\n  }\n\n/* ==========  Constructor  ========== */\n\n  constructor(\n    IUniswapV2Router02 uniswapRouter,\n    IIndexedUniswapV2Oracle oracle_,\n    address controller_\n  ) public {\n    _uniswapRouter = uniswapRouter;\n    oracle = oracle_;\n    controller = controller_;\n  }\n\n  /**\n   * @dev Initialize the proxy contract with the acceptable premium rate\n   * and the address of the pool it is for.\n   */\n  function initialize(address pool, uint8 premiumPercent)\n    external\n    override\n    _control_\n  {\n    require(address(_pool) == address(0), \"ERR_INITIALIZED\");\n    require(pool != address(0), \"ERR_NULL_ADDRESS\");\n    require(\n      premiumPercent > 0 && premiumPercent < 20,\n      \"ERR_PREMIUM\"\n    );\n    _premiumPercent = premiumPercent;\n    _pool = IIndexPool(pool);\n  }\n\n/* ==========  Controls  ========== */\n\n  /**\n   * @dev Receive `amount` of `token` from the pool.\n   */\n  function handleUnbindToken(address token, uint256 amount)\n    external\n    override\n  {\n    require(msg.sender == address(_pool), \"ERR_ONLY_POOL\");\n    emit NewTokensToSell(token, amount);\n  }\n\n  /**\n   * @dev Set the premium rate as a percent.\n   */\n  function setPremiumPercent(uint8 premiumPercent) external override _control_ {\n    require(\n      premiumPercent > 0 && premiumPercent < 20,\n      \"ERR_PREMIUM\"\n    );\n    _premiumPercent = premiumPercent;\n    emit PremiumPercentSet(premiumPercent);\n  }\n\n/* ==========  Token Swaps  ========== */\n\n  /**\n   * @dev Execute a trade with UniSwap to sell some tokens held by the contract\n   * for some tokens desired by the pool and pays the caller the difference between\n   * the maximum input value and the actual paid amount.\n   *\n   * @param tokenIn Token to sell to UniSwap\n   * @param tokenOut Token to receive from UniSwapx\n   * @param amountOut Exact amount of `tokenOut` to receive from UniSwap\n   * @param path Swap path to execute\n   */\n  function executeSwapTokensForExactTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    address[] calldata path\n  )\n    external\n    override\n    _lock_\n    returns (uint256 premiumPaidToCaller)\n  {\n    // calcOutGivenIn uses tokenIn as the token the pool is receiving and\n    // tokenOut as the token the pool is paying, whereas this function is\n    // the reverse.\n    uint256 maxAmountIn = calcOutGivenIn(tokenOut, tokenIn, amountOut);\n    // Approve UniSwap to transfer the input tokens\n    IERC20(tokenIn).safeApprove(address(_uniswapRouter), maxAmountIn);\n    // Verify that the first token in the path is the input token and that\n    // the last is the output token.\n    require(\n      path[0] == tokenIn && path[path.length - 1] == tokenOut,\n      \"ERR_PATH_TOKENS\"\n    );\n    // Execute the swap.\n    uint256[] memory amounts = _uniswapRouter.swapTokensForExactTokens(\n      amountOut,\n      maxAmountIn,\n      path,\n      address(_pool),\n      block.timestamp\n    );\n    // Get the actual amount paid\n    uint256 amountIn = amounts[0];\n    // If we did not swap the full amount, remove the UniSwap allowance.\n    if (amountIn < maxAmountIn) {\n      IERC20(tokenIn).safeApprove(address(_uniswapRouter), 0);\n      premiumPaidToCaller = maxAmountIn - amountIn;\n      // Transfer the difference between what the contract was willing to pay and\n      // what it actually paid to the caller.\n      IERC20(tokenIn).safeTransfer(msg.sender, premiumPaidToCaller);\n\n    }\n    // Update the pool's balance of the token.\n    _pool.gulp(tokenOut);\n    emit SwappedTokens(\n      tokenIn,\n      tokenOut,\n      amountIn,\n      amountOut\n    );\n  }\n\n  /**\n   * @dev Executes a trade with UniSwap to sell some tokens held by the contract\n   * for some tokens desired by the pool and pays the caller any tokens received\n   * above the minimum acceptable output.\n   *\n   * @param tokenIn Token to sell to UniSwap\n   * @param tokenOut Token to receive from UniSwap\n   * @param amountIn Exact amount of `tokenIn` to give UniSwap\n   * @param path Swap path to execute\n   */\n  function executeSwapExactTokensForTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    address[] calldata path\n  )\n    external\n    override\n    _lock_\n    returns (uint256 premiumPaidToCaller)\n  {\n    // calcInGivenOut uses tokenIn as the token the pool is receiving and\n    // tokenOut as the token the pool is paying, whereas this function is\n    // the reverse.\n    uint256 minAmountOut = calcInGivenOut(tokenOut, tokenIn, amountIn);\n    // Approve UniSwap to transfer the input tokens\n    IERC20(tokenIn).safeApprove(address(_uniswapRouter), amountIn);\n    // Verify that the first token in the path is the input token and that\n    // the last is the output token.\n    require(\n      path[0] == tokenIn && path[path.length - 1] == tokenOut,\n      \"ERR_PATH_TOKENS\"\n    );\n    // Execute the swap.\n    uint256[] memory amounts = _uniswapRouter.swapExactTokensForTokens(\n      amountIn,\n      minAmountOut,\n      path,\n      address(this),\n      block.timestamp\n    );\n  \n    // Get the actual amount paid\n    uint256 amountOut = amounts[amounts.length - 1];\n    if (amountOut > minAmountOut) {\n      // Transfer any tokens received beyond the minimum acceptable payment\n      // to the caller as a reward.\n      premiumPaidToCaller = amountOut - minAmountOut;\n      IERC20(tokenOut).safeTransfer(msg.sender, premiumPaidToCaller);\n    }\n    // Transfer the received tokens to the pool\n    IERC20(tokenOut).safeTransfer(address(_pool), minAmountOut);\n    // Update the pool's balance of the token.\n    _pool.gulp(tokenOut);\n    emit SwappedTokens(\n      tokenIn,\n      tokenOut,\n      amountIn,\n      amountOut\n    );\n  }\n\n  /**\n   * @dev Swap exactly `amountIn` of `tokenIn` for at least `minAmountOut`\n   * of `tokenOut`.\n   *\n   * @param tokenIn Token to sell to pool\n   * @param tokenOut Token to buy from pool\n   * @param amountIn Amount of `tokenIn` to sell to pool\n   * @param minAmountOut Minimum amount of `tokenOut` to buy from pool\n   */\n  function swapExactTokensForTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  )\n    external\n    override\n    _lock_\n    returns (uint256 amountOut)\n  {\n    amountOut = calcOutGivenIn(tokenIn, tokenOut, amountIn);\n    // Verify the amount is above the provided minimum.\n    require(amountOut >= minAmountOut, \"ERR_MIN_AMOUNT_OUT\");\n    // Transfer the input tokens to the pool\n    IERC20(tokenIn).safeTransferFrom(msg.sender, address(_pool), amountIn);\n    _pool.gulp(tokenIn);\n    // Transfer the output tokens to the caller\n    IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\n    emit SwappedTokens(\n      tokenOut,\n      tokenIn,\n      amountOut,\n      amountIn\n    );\n  }\n\n  /**\n   * @dev Swap up to `maxAmountIn` of `tokenIn` for exactly `amountOut`\n   * of `tokenOut`.\n   *\n   * @param tokenIn Token to sell to pool\n   * @param tokenOut Token to buy from pool\n   * @param amountOut Amount of `tokenOut` to buy from pool\n   * @param maxAmountIn Maximum amount of `tokenIn` to sell to pool\n   */\n  function swapTokensForExactTokens(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    uint256 maxAmountIn\n  )\n    external\n    override\n    _lock_\n    returns (uint256 amountIn)\n  {\n    amountIn = calcInGivenOut(tokenIn, tokenOut, amountOut);\n    require(amountIn <= maxAmountIn, \"ERR_MAX_AMOUNT_IN\");\n    // Transfer the input tokens to the pool\n    IERC20(tokenIn).safeTransferFrom(msg.sender, address(_pool), amountIn);\n    _pool.gulp(tokenIn);\n    // Transfer the output tokens to the caller\n    IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\n    emit SwappedTokens(\n      tokenOut,\n      tokenIn,\n      amountOut,\n      amountIn\n    );\n  }\n\n/* ==========  Swap Queries  ========== */\n\n  function getPremiumPercent() external view override returns (uint8) {\n    return _premiumPercent;\n  }\n\n  /**\n   * @dev Calculate the amount of `tokenIn` the pool will accept for\n   * `amountOut` of `tokenOut`.\n   */\n  function calcInGivenOut(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut\n  )\n    public\n    view\n    override\n    _desired_(tokenIn)\n    returns (uint256 amountIn)\n  {\n    require(\n      IERC20(tokenOut).balanceOf(address(this)) >= amountOut,\n      \"ERR_INSUFFICIENT_BALANCE\"\n    );\n    (\n      PriceLibrary.TwoWayAveragePrice memory avgPriceIn,\n      PriceLibrary.TwoWayAveragePrice memory avgPriceOut\n    ) = _getAveragePrices(tokenIn, tokenOut);\n    // Compute the average weth value for `amountOut` of `tokenOut`\n    uint144 avgOutValue = avgPriceOut.computeAverageEthForTokens(amountOut);\n    // Compute the minimum weth value the contract must receive for `avgOutValue`\n    uint256 minInValue = _minimumReceivedValue(avgOutValue);\n    // Compute the average amount of `tokenIn` worth `minInValue` weth\n    amountIn = avgPriceIn.computeAverageTokensForEth(minInValue);\n  }\n\n  /**\n   * @dev Calculate the amount of `tokenOut` the pool will give for\n   * `amountIn` of `tokenIn`.\n   */\n  function calcOutGivenIn(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  )\n    public\n    view\n    override\n    _desired_(tokenIn)\n    returns (uint256 amountOut)\n  {\n    (\n      PriceLibrary.TwoWayAveragePrice memory avgPriceIn,\n      PriceLibrary.TwoWayAveragePrice memory avgPriceOut\n    ) = _getAveragePrices(tokenIn, tokenOut);\n    // Compute the average weth value for `amountIn` of `tokenIn`\n    uint144 avgInValue = avgPriceIn.computeAverageEthForTokens(amountIn);\n    // Compute the maximum weth value the contract will give for `avgInValue`\n    uint256 maxOutValue = _maximumPaidValue(avgInValue);\n    // Compute the average amount of `tokenOut` worth `maxOutValue` weth\n    amountOut = avgPriceOut.computeAverageTokensForEth(maxOutValue);\n    require(\n      IERC20(tokenOut).balanceOf(address(this)) >= amountOut,\n      \"ERR_INSUFFICIENT_BALANCE\"\n    );\n  }\n\n/* ==========  Internal Functions  ========== */\n\n  function _getAveragePrices(address token1, address token2)\n    internal\n    view\n    returns (\n      PriceLibrary.TwoWayAveragePrice memory avgPrice1,\n      PriceLibrary.TwoWayAveragePrice memory avgPrice2\n    )\n  {\n    address[] memory tokens = new address[](2);\n    tokens[0] = token1;\n    tokens[1] = token2;\n    PriceLibrary.TwoWayAveragePrice[] memory prices = oracle.computeTwoWayAveragePrices(\n      tokens,\n      SHORT_TWAP_MIN_TIME_ELAPSED,\n      SHORT_TWAP_MAX_TIME_ELAPSED\n    );\n    avgPrice1 = prices[0];\n    avgPrice2 = prices[1];\n  }\n\n  function _maximumPaidValue(uint256 valueReceived)\n    internal\n    view\n    returns (uint256 maxPaidValue)\n  {\n    maxPaidValue = (100 * valueReceived) / (100 - _premiumPercent);\n  }\n\n\n  function _minimumReceivedValue(uint256 valuePaid)\n    internal\n    view\n    returns (uint256 minValueReceived)\n  {\n    minValueReceived = (valuePaid * (100 - _premiumPercent)) / 100;\n  }\n}"
    },
    "@indexed-finance/uniswap-v2-oracle/contracts/interfaces/IIndexedUniswapV2Oracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n/* ==========  Libraries  ========== */\nimport \"../lib/PriceLibrary.sol\";\nimport \"../lib/FixedPoint.sol\";\n\n\ninterface IIndexedUniswapV2Oracle {\n/* ==========  Mutative Functions  ========== */\n\n  function updatePrice(address token) external returns (bool);\n\n  function updatePrices(address[] calldata tokens) external returns (bool[] memory);\n\n/* ==========  Meta Price Queries  ========== */\n\n  function hasPriceObservationInWindow(address token, uint256 priceKey) external view returns (bool);\n\n  function getPriceObservationInWindow(\n    address token, uint256 priceKey\n  ) external view returns (PriceLibrary.PriceObservation memory);\n\n  function getPriceObservationsInRange(\n    address token, uint256 timeFrom, uint256 timeTo\n  ) external view returns (PriceLibrary.PriceObservation[] memory prices);\n\n/* ==========  Price Update Queries  ========== */\n\n  function canUpdatePrice(address token) external view returns (bool);\n\n  function canUpdatePrices(address[] calldata tokens) external view returns (bool[] memory);\n\n/* ==========  Price Queries: Singular  ========== */\n\n  function computeTwoWayAveragePrice(\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\n  ) external view returns (PriceLibrary.TwoWayAveragePrice memory);\n\n  function computeAverageTokenPrice(\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\n  ) external view returns (FixedPoint.uq112x112 memory);\n\n  function computeAverageEthPrice(\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\n  ) external view returns (FixedPoint.uq112x112 memory);\n\n/* ==========  Price Queries: Multiple  ========== */\n\n  function computeTwoWayAveragePrices(\n    address[] calldata tokens,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (PriceLibrary.TwoWayAveragePrice[] memory);\n\n  function computeAverageTokenPrices(\n    address[] calldata tokens,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (FixedPoint.uq112x112[] memory);\n\n  function computeAverageEthPrices(\n    address[] calldata tokens,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (FixedPoint.uq112x112[] memory);\n\n/* ==========  Value Queries: Singular  ========== */\n\n  function computeAverageEthForTokens(\n    address token,\n    uint256 tokenAmount,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (uint144);\n\n  function computeAverageTokensForEth(\n    address token,\n    uint256 wethAmount,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (uint144);\n\n/* ==========  Value Queries: Multiple  ========== */\n\n  function computeAverageEthForTokens(\n    address[] calldata tokens,\n    uint256[] calldata tokenAmounts,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (uint144[] memory);\n\n  function computeAverageTokensForEth(\n    address[] calldata tokens,\n    uint256[] calldata wethAmounts,\n    uint256 minTimeElapsed,\n    uint256 maxTimeElapsed\n  ) external view returns (uint144[] memory);\n}"
    },
    "@indexed-finance/uniswap-v2-oracle/contracts/lib/PriceLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n/* ==========  Internal Libraries  ========== */\nimport \"./FixedPoint.sol\";\nimport \"./UniswapV2OracleLibrary.sol\";\nimport \"./UniswapV2Library.sol\";\n\n\nlibrary PriceLibrary {\n  using FixedPoint for FixedPoint.uq112x112;\n  using FixedPoint for FixedPoint.uq144x112;\n\n/* ========= Structs ========= */\n\n  struct PriceObservation {\n    uint32 timestamp;\n    uint224 priceCumulativeLast;\n    uint224 ethPriceCumulativeLast;\n  }\n\n  /**\n   * @dev Average prices for a token in terms of weth and weth in terms of the token.\n   *\n   * Note: The average weth price is not equivalent to the reciprocal of the average\n   * token price. See the UniSwap whitepaper for more info.\n   */\n  struct TwoWayAveragePrice {\n    uint224 priceAverage;\n    uint224 ethPriceAverage;\n  }\n\n/* ========= View Functions ========= */\n\n  function pairInitialized(\n    address uniswapFactory,\n    address token,\n    address weth\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address pair = UniswapV2Library.pairFor(uniswapFactory, token, weth);\n    (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\n    return reserve0 != 0 && reserve1 != 0;\n  }\n\n  function observePrice(\n    address uniswapFactory,\n    address tokenIn,\n    address quoteToken\n  )\n    internal\n    view\n    returns (uint32 /* timestamp */, uint224 /* priceCumulativeLast */)\n  {\n    (address token0, address token1) = UniswapV2Library.sortTokens(tokenIn, quoteToken);\n    address pair = UniswapV2Library.calculatePair(uniswapFactory, token0, token1);\n    if (token0 == tokenIn) {\n      (uint256 price0Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrice0(pair);\n      return (blockTimestamp, uint224(price0Cumulative));\n    } else {\n      (uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrice1(pair);\n      return (blockTimestamp, uint224(price1Cumulative));\n    }\n  }\n\n  /**\n   * @dev Query the current cumulative price of a token in terms of weth\n   * and the current cumulative price of weth in terms of the token.\n   */\n  function observeTwoWayPrice(\n    address uniswapFactory,\n    address token,\n    address weth\n  ) internal view returns (PriceObservation memory) {\n    (address token0, address token1) = UniswapV2Library.sortTokens(token, weth);\n    address pair = UniswapV2Library.calculatePair(uniswapFactory, token0, token1);\n    // Get the sorted token prices\n    (\n      uint256 price0Cumulative,\n      uint256 price1Cumulative,\n      uint32 blockTimestamp\n    ) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n    // Check which token is weth and which is the token,\n    // then build the price observation.\n    if (token0 == token) {\n      return PriceObservation({\n        timestamp: blockTimestamp,\n        priceCumulativeLast: uint224(price0Cumulative),\n        ethPriceCumulativeLast: uint224(price1Cumulative)\n      });\n    } else {\n      return PriceObservation({\n        timestamp: blockTimestamp,\n        priceCumulativeLast: uint224(price1Cumulative),\n        ethPriceCumulativeLast: uint224(price0Cumulative)\n      });\n    }\n  }\n\n/* ========= Utility Functions ========= */\n\n  /**\n   * @dev Computes the average price of a token in terms of weth\n   * and the average price of weth in terms of a token using two\n   * price observations.\n   */\n  function computeTwoWayAveragePrice(\n    PriceObservation memory observation1,\n    PriceObservation memory observation2\n  ) internal pure returns (TwoWayAveragePrice memory) {\n    uint32 timeElapsed = uint32(observation2.timestamp - observation1.timestamp);\n    FixedPoint.uq112x112 memory priceAverage = UniswapV2OracleLibrary.computeAveragePrice(\n      observation1.priceCumulativeLast,\n      observation2.priceCumulativeLast,\n      timeElapsed\n    );\n    FixedPoint.uq112x112 memory ethPriceAverage = UniswapV2OracleLibrary.computeAveragePrice(\n      observation1.ethPriceCumulativeLast,\n      observation2.ethPriceCumulativeLast,\n      timeElapsed\n    );\n    return TwoWayAveragePrice({\n      priceAverage: priceAverage._x,\n      ethPriceAverage: ethPriceAverage._x\n    });\n  }\n\n  function computeAveragePrice(\n    uint32 timestampStart,\n    uint224 priceCumulativeStart,\n    uint32 timestampEnd,\n    uint224 priceCumulativeEnd\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\n    return UniswapV2OracleLibrary.computeAveragePrice(\n      priceCumulativeStart,\n      priceCumulativeEnd,\n      uint32(timestampEnd - timestampStart)\n    );\n  }\n\n  /**\n   * @dev Computes the average price of the token the price observations\n   * are for in terms of weth.\n   */\n  function computeAverageTokenPrice(\n    PriceObservation memory observation1,\n    PriceObservation memory observation2\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\n    return UniswapV2OracleLibrary.computeAveragePrice(\n      observation1.priceCumulativeLast,\n      observation2.priceCumulativeLast,\n      uint32(observation2.timestamp - observation1.timestamp)\n    );\n  }\n\n  /**\n   * @dev Computes the average price of weth in terms of the token\n   * the price observations are for.\n   */\n  function computeAverageEthPrice(\n    PriceObservation memory observation1,\n    PriceObservation memory observation2\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\n    return UniswapV2OracleLibrary.computeAveragePrice(\n      observation1.ethPriceCumulativeLast,\n      observation2.ethPriceCumulativeLast,\n      uint32(observation2.timestamp - observation1.timestamp)\n    );\n  }\n\n  /**\n   * @dev Compute the average value in weth of `tokenAmount` of the\n   * token that the average price values are for.\n   */\n  function computeAverageEthForTokens(\n    TwoWayAveragePrice memory prices,\n    uint256 tokenAmount\n  ) internal pure returns (uint144) {\n    return FixedPoint.uq112x112(prices.priceAverage).mul(tokenAmount).decode144();\n  }\n\n  /**\n   * @dev Compute the average value of `wethAmount` weth in terms of\n   * the token that the average price values are for.\n   */\n  function computeAverageTokensForEth(\n    TwoWayAveragePrice memory prices,\n    uint256 wethAmount\n  ) internal pure returns (uint144) {\n    return FixedPoint.uq112x112(prices.ethPriceAverage).mul(wethAmount).decode144();\n  }\n}"
    },
    "@indexed-finance/uniswap-v2-oracle/contracts/lib/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\n\n\n/************************************************************************************************\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\n\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\n\nModifications:\n- Removed `sqrt` function\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n  // range: [0, 2**112 - 1]\n  // resolution: 1 / 2**112\n  struct uq112x112 {\n    uint224 _x;\n  }\n\n  // range: [0, 2**144 - 1]\n  // resolution: 1 / 2**112\n  struct uq144x112 {\n    uint _x;\n  }\n\n  uint8 private constant RESOLUTION = 112;\n  uint private constant Q112 = uint(1) << RESOLUTION;\n  uint private constant Q224 = Q112 << RESOLUTION;\n\n  // encode a uint112 as a UQ112x112\n  function encode(uint112 x) internal pure returns (uq112x112 memory) {\n    return uq112x112(uint224(x) << RESOLUTION);\n  }\n\n  // encodes a uint144 as a UQ144x112\n  function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n    return uq144x112(uint256(x) << RESOLUTION);\n  }\n\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\n  function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n    require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n    return uq112x112(self._x / uint224(x));\n  }\n\n  // multiply a UQ112x112 by a uint, returning a UQ144x112\n  // reverts on overflow\n  function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n    uint z;\n    require(\n      y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\n      \"FixedPoint: MULTIPLICATION_OVERFLOW\"\n    );\n    return uq144x112(z);\n  }\n\n  // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n  // equivalent to encode(numerator).div(denominator)\n  function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n    require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n    return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n  }\n\n  // decode a UQ112x112 into a uint112 by truncating after the radix point\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\n    return uint112(self._x >> RESOLUTION);\n  }\n\n  // decode a UQ144x112 into a uint144 by truncating after the radix point\n  function decode144(uq144x112 memory self) internal pure returns (uint144) {\n    return uint144(self._x >> RESOLUTION);\n  }\n\n  // take the reciprocal of a UQ112x112\n  function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n    require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n    return uq112x112(uint224(Q224 / self._x));\n  }\n}"
    },
    "@indexed-finance/uniswap-v2-oracle/contracts/lib/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\n\n/* ==========  Internal Interfaces  ========== */\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\n/* ==========  Internal Libraries  ========== */\nimport \"./FixedPoint.sol\";\n\n\n/************************************************************************************************\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2OracleLibrary.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash 6d03bede0a97c72323fa1c379ed3fdf7231d0b26.\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n  using FixedPoint for *;\n\n  // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n  function currentBlockTimestamp() internal view returns (uint32) {\n    return uint32(block.timestamp % 2**32);\n  }\n\n  // produces the cumulative prices using counterfactuals to save gas and avoid a call to sync.\n  function currentCumulativePrices(address pair)\n    internal\n    view\n    returns (\n      uint256 price0Cumulative,\n      uint256 price1Cumulative,\n      uint32 blockTimestamp\n    )\n  {\n    blockTimestamp = currentBlockTimestamp();\n    price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n    price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\n    (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    ) = IUniswapV2Pair(pair).getReserves();\n    require(\n      reserve0 != 0 && reserve1 != 0,\n      \"UniswapV2OracleLibrary::currentCumulativePrices: Pair has no reserves.\"\n    );\n    if (blockTimestampLast != blockTimestamp) {\n      // subtraction overflow is desired\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n      // addition overflow is desired\n      // counterfactual\n      price0Cumulative += (\n        uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\n        timeElapsed\n      );\n      // counterfactual\n      price1Cumulative += (\n        uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\n        timeElapsed\n      );\n    }\n  }\n\n  // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n  // only gets the first price\n  function currentCumulativePrice0(address pair)\n    internal\n    view\n    returns (uint256 price0Cumulative, uint32 blockTimestamp)\n  {\n    blockTimestamp = currentBlockTimestamp();\n    price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\n    (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    ) = IUniswapV2Pair(pair).getReserves();\n    require(\n      reserve0 != 0 && reserve1 != 0,\n      \"UniswapV2OracleLibrary::currentCumulativePrice0: Pair has no reserves.\"\n    );\n    if (blockTimestampLast != blockTimestamp) {\n      // subtraction overflow is desired\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n      // addition overflow is desired\n      // counterfactual\n      price0Cumulative += (\n        uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\n        timeElapsed\n      );\n    }\n  }\n\n  // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n  // only gets the second price\n  function currentCumulativePrice1(address pair)\n    internal\n    view\n    returns (uint256 price1Cumulative, uint32 blockTimestamp)\n  {\n    blockTimestamp = currentBlockTimestamp();\n    price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\n    (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    ) = IUniswapV2Pair(pair).getReserves();\n    require(\n      reserve0 != 0 && reserve1 != 0,\n      \"UniswapV2OracleLibrary::currentCumulativePrice1: Pair has no reserves.\"\n    );\n    if (blockTimestampLast != blockTimestamp) {\n      // subtraction overflow is desired\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n      // addition overflow is desired\n      // counterfactual\n      price1Cumulative += (\n        uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\n        timeElapsed\n      );\n    }\n  }\n\n  function computeAveragePrice(\n    uint224 priceCumulativeStart,\n    uint224 priceCumulativeEnd,\n    uint32 timeElapsed\n  ) internal pure returns (FixedPoint.uq112x112 memory priceAverage) {\n    // overflow is desired.\n    priceAverage = FixedPoint.uq112x112(\n      uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\n    );\n  }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@indexed-finance/uniswap-v2-oracle/contracts/lib/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.0;\n\n/************************************************************************************************\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\n\nThis source code has been modified from the original, which was copied from the github repository\nat commit hash 87edfdcaf49ccc52591502993db4c8c08ea9eec0.\n\nSubject to the GPL-3.0 license\n*************************************************************************************************/\n\n\nlibrary UniswapV2Library {\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\n  function sortTokens(address tokenA, address tokenB)\n    internal\n    pure\n    returns (address token0, address token1)\n  {\n    require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n  }\n\n  function calculatePair(\n    address factory,\n    address token0,\n    address token1\n  ) internal pure returns (address pair) {\n    pair = address(\n      uint256(\n        keccak256(\n          abi.encodePacked(\n            hex\"ff\",\n            factory,\n            keccak256(abi.encodePacked(token0, token1)),\n            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n          )\n        )\n      )\n    );\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  function pairFor(\n    address factory,\n    address tokenA,\n    address tokenB\n  ) internal pure returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = calculatePair(factory, token0, token1);\n  }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}