{
  "address": "0xa5bD85ed9fA27ba23BfB702989e7218E44fd4706",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "synthSwapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "settleFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settleFromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "settleTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settleToAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinal",
          "type": "bool"
        }
      ],
      "name": "Settle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swap",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "synthIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "currencyKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "synthAddress",
          "type": "address"
        }
      ],
      "name": "SynthIndex",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract ISwap",
          "name": "swapPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "synthFromKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthFromInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        }
      ],
      "name": "SynthToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract ISwap",
          "name": "swapPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFromInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "synthToKey",
          "type": "bytes32"
        }
      ],
      "name": "TokenToSynth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract ISwap[2]",
          "name": "swapPools",
          "type": "address[2]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        }
      ],
      "name": "TokenToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "synth",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinal",
          "type": "bool"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXCHANGER_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_RATES_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYNTHETIX_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYNTH_SWAPPER_MASTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        }
      ],
      "name": "calcCompleteToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "synthInKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "synthInAmount",
          "type": "uint256"
        }
      ],
      "name": "calcSynthToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "synthOutKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        }
      ],
      "name": "calcTokenToSynth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap[2]",
          "name": "swaps",
          "type": "address[2]"
        },
        {
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenFromAmount",
          "type": "uint256"
        }
      ],
      "name": "calcTokenToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "completeToSynth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "completeToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "contract IExchanger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "getPendingSwapInfo",
      "outputs": [
        {
          "internalType": "enum Bridge.PendingSwapType",
          "name": "swapType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "secsLeft",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "synth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "synthBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "synthKey",
          "type": "bytes32"
        }
      ],
      "name": "getProxyAddressFromTargetSynthKey",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "getSynthAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "getSynthIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        }
      ],
      "name": "getSynthKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingSwapsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingToSynthSwaps",
      "outputs": [
        {
          "internalType": "contract SynthSwapper",
          "name": "swapper",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "synthKey",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingToTokenSwaps",
      "outputs": [
        {
          "internalType": "contract SynthSwapper",
          "name": "swapper",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "synthKey",
          "type": "bytes32"
        },
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "synthIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "currencyKey",
          "type": "bytes32"
        }
      ],
      "name": "setSynthIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "synthInKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "synthInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minMediumSynthAmount",
          "type": "uint256"
        }
      ],
      "name": "synthToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "swap",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "synthOutKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenToSynth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap[2]",
          "name": "swaps",
          "type": "address[2]"
        },
        {
          "internalType": "uint8",
          "name": "tokenFromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenToIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenFromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minMediumSynthAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateExchangerCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b3fa1c6582466f5e1c125a9836b162304d1bbf5e2361d40a39b2f3edb48c8d8",
  "receipt": {
    "to": null,
    "from": "0x5BDb37d0Ddea3A90F233c7B7F6b9394B6b2eef34",
    "contractAddress": "0xa5bD85ed9fA27ba23BfB702989e7218E44fd4706",
    "transactionIndex": 100,
    "gasUsed": "4964851",
    "logsBloom": "0x
    "blockHash": "0x1de88193e4aef3832485cd43707581fe1408d2976ebad66fcebdfefb3d2fd63f",
    "transactionHash": "0x6b3fa1c6582466f5e1c125a9836b162304d1bbf5e2361d40a39b2f3edb48c8d8",
    "logs": [],
    "blockNumber": 13232215,
    "cumulativeGasUsed": "11898190",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xdf815Ea6b066Ac9f3107d8863a6c19aA2a5d24d3"],
  "solcInputHash": "83663b3e19281856908ab864c5be0a28",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthSwapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"settleFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleFromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"settleTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleToAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"synthIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synthAddress\",\"type\":\"address\"}],\"name\":\"SynthIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ISwap\",\"name\":\"swapPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthFromKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthFromInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"}],\"name\":\"SynthToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ISwap\",\"name\":\"swapPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFromInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthToKey\",\"type\":\"bytes32\"}],\"name\":\"TokenToSynth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ISwap[2]\",\"name\":\"swapPools\",\"type\":\"address[2]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"}],\"name\":\"TokenToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"synth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXCHANGER_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_RATES_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYNTHETIX_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYNTH_SWAPPER_MASTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"calcCompleteToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synthInKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"synthInAmount\",\"type\":\"uint256\"}],\"name\":\"calcSynthToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"synthOutKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenToSynth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap[2]\",\"name\":\"swaps\",\"type\":\"address[2]\"},{\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"completeToSynth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"completeToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"contract IExchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getPendingSwapInfo\",\"outputs\":[{\"internalType\":\"enum Bridge.PendingSwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"secsLeft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"synthBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"}],\"name\":\"getProxyAddressFromTargetSynthKey\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"getSynthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"getSynthIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"}],\"name\":\"getSynthKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingSwapsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingToSynthSwaps\",\"outputs\":[{\"internalType\":\"contract SynthSwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingToTokenSwaps\",\"outputs\":[{\"internalType\":\"contract SynthSwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"synthIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"setSynthIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"synthInKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"synthInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMediumSynthAmount\",\"type\":\"uint256\"}],\"name\":\"synthToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"synthOutKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToSynth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap[2]\",\"name\":\"swaps\",\"type\":\"address[2]\"},{\"internalType\":\"uint8\",\"name\":\"tokenFromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenToIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenFromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMediumSynthAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangerCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"calcCompleteToToken(uint256,uint256)\":{\"params\":{\"itemId\":\"ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap\",\"swapAmount\":\"the amount of bridging synth to swap from\"},\"returns\":{\"_0\":\"expected amount of the token the user will receive\"}},\"calcSynthToToken(address,bytes32,uint8,uint256)\":{\"params\":{\"swap\":\"the address of a Saddle pool to use to swap the given token to a bridging synth\",\"synthInAmount\":\"the amount of the synth to swap form\",\"synthInKey\":\"the currency key of the synth to swap from\",\"tokenToIndex\":\"the index of the token to swap to\"},\"returns\":{\"_0\":\"the expected amount of the bridging synth and the expected amount of the desired token\"}},\"calcTokenToSynth(address,uint8,bytes32,uint256)\":{\"params\":{\"swap\":\"the address of a Saddle pool to use to swap the given token to a bridging synth\",\"synthOutKey\":\"the currency key of the desired synthetic asset\",\"tokenFromIndex\":\"the index of the token to swap from\",\"tokenInAmount\":\"the amount of the token to swap form\"},\"returns\":{\"_0\":\"the expected amount of the desired synth\"}},\"calcTokenToToken(address[2],uint8,uint8,uint256)\":{\"params\":{\"swaps\":\"the addresses of the two Saddle pools used to do the cross-asset swap\",\"tokenFromAmount\":\"the amount of the token to swap from\",\"tokenFromIndex\":\"the index of the token in the first `swaps` pool to swap from\",\"tokenToIndex\":\"the index of the token in the second `swaps` pool to swap to\"},\"returns\":{\"_0\":\"the expected amount of bridging synth at pre-settlement stage and the expected amount of the desired token\"}},\"completeToSynth(uint256)\":{\"params\":{\"itemId\":\"ERC721 token ID representing a pending `tokenToSynth` swap\"}},\"completeToToken(uint256,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"the timestamp representing the deadline for this transaction - reverts if deadline is not met\",\"itemId\":\"ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap\",\"minAmount\":\"the minimum amount of the token to receive - reverts if this amount is not reached\",\"swapAmount\":\"the amount of bridging synth to swap from\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPendingSwapInfo(uint256)\":{\"params\":{\"itemId\":\"ID of the pending swap\"},\"returns\":{\"swapType\":\"the type of the pending virtual swap, secsLeft number of seconds left until this swap can be settled, synth address of the synth this swap uses, synthBalance amount of the synth this swap holds, tokenTo the address of the destination token\"}},\"getProxyAddressFromTargetSynthKey(bytes32)\":{\"params\":{\"synthKey\":\"the currency key of the synth\"},\"returns\":{\"_0\":\"address of the proxy contract\"}},\"getSynthAddress(address)\":{\"params\":{\"swap\":\"the address of the pool that contains the synth\"},\"returns\":{\"_0\":\"the address of the supported synth\"}},\"getSynthIndex(address)\":{\"params\":{\"swap\":\"the address of the pool that contains the synth\"},\"returns\":{\"_0\":\"the index of the supported synth\"}},\"getSynthKey(address)\":{\"params\":{\"swap\":\"the address of the pool that contains the synth\"},\"returns\":{\"_0\":\"the currency key of the supported synth\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setSynthIndex(address,uint8,bytes32)\":{\"params\":{\"currencyKey\":\"the currency key of the synth in bytes32 form\",\"swap\":\"the address of the pool that contains the synth\",\"synthIndex\":\"the index of the supported synth in the given `swap` pool\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"synthToToken(address,bytes32,uint8,uint256,uint256)\":{\"params\":{\"minMediumSynthAmount\":\"the minimum amount of the bridging synth at pre-settlement stage\",\"swap\":\"the address of a Saddle pool to use to swap the given token to a bridging synth\",\"synthInAmount\":\"the amount of the synth to swap form\",\"synthInKey\":\"the currency key of the synth to swap from\",\"tokenToIndex\":\"the index of the token to swap to\"},\"returns\":{\"_0\":\"the ID of the ERC721 token sent to the caller\"}},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenToSynth(address,uint8,bytes32,uint256,uint256)\":{\"params\":{\"minAmount\":\"the amount of the token to swap form\",\"swap\":\"the address of a Saddle pool to use to swap the given token to a bridging synth\",\"synthOutKey\":\"the currency key of the desired synthetic asset\",\"tokenFromIndex\":\"the index of the token to swap from\",\"tokenInAmount\":\"the amount of the token to swap form\"},\"returns\":{\"_0\":\"ID of the ERC721 token sent to the caller\"}},\"tokenToToken(address[2],uint8,uint8,uint256,uint256)\":{\"params\":{\"minMediumSynthAmount\":\"the minimum amount of the bridging synth at pre-settlement stage\",\"swaps\":\"the addresses of the two Saddle pools used to do the cross-asset swap\",\"tokenFromAmount\":\"the amount of the token to swap from\",\"tokenFromIndex\":\"the index of the token in the first `swaps` pool to swap from\",\"tokenToIndex\":\"the index of the token in the second `swaps` pool to swap to\"},\"returns\":{\"_0\":\"the ID of the ERC721 token sent to the caller\"}},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"the amount of the synth to withdraw\",\"itemId\":\"ID of the pending swap\"}}},\"title\":\"Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcCompleteToToken(uint256,uint256)\":{\"notice\":\"Calculates the expected amount of the token to receive on calling `completeToToken()` with the given `swapAmount`.\"},\"calcSynthToToken(address,bytes32,uint8,uint256)\":{\"notice\":\"Calculates the expected amount of the desired token the caller will receive after completing a `SynthToToken` swap with the given parameters. This calculation does not consider the settlement periods or any potential changes of the `swap` pool composition.\"},\"calcTokenToSynth(address,uint8,bytes32,uint256)\":{\"notice\":\"Calculates the expected amount of the desired synthetic asset the caller will receive after completing a `TokenToSynth` swap with the given parameters. This calculation does not consider the settlement periods.\"},\"calcTokenToToken(address[2],uint8,uint8,uint256)\":{\"notice\":\"Calculates the expected amount of the desired token the caller will receive after completing a `TokenToToken` swap with the given parameters. This calculation does not consider the settlement periods or any potential changes of the pool compositions.\"},\"completeToSynth(uint256)\":{\"notice\":\"Completes the pending `tokenToSynth` swap by settling and withdrawing the synthetic asset. Reverts if the given `itemId` does not represent a `tokenToSynth` swap.\"},\"completeToToken(uint256,uint256,uint256,uint256)\":{\"notice\":\"Completes the pending `SynthToToken` or `TokenToToken` swap by settling the bridging synth and swapping it to the desired token. Only the owners of the pending swaps can call this function.\"},\"constructor\":\"Deploys this contract and initializes the master version of the SynthSwapper contract. The address to the Synthetix protocol's Exchanger contract is also set on deployment.\",\"getPendingSwapInfo(uint256)\":{\"notice\":\"Returns various information of a pending swap represented by the given `itemId`. Information includes the type of the pending swap, the number of seconds left until it can be settled, the address and the balance of the synth this swap currently holds, and the address of the destination token.\"},\"getProxyAddressFromTargetSynthKey(bytes32)\":{\"notice\":\"Returns the address of the proxy contract targeting the synthetic asset with the given `synthKey`.\"},\"getSynthAddress(address)\":{\"notice\":\"Returns the address of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered.\"},\"getSynthIndex(address)\":{\"notice\":\"Returns the index of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered.\"},\"getSynthKey(address)\":{\"notice\":\"Returns the currency key of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered.\"},\"setSynthIndex(address,uint8,bytes32)\":{\"notice\":\"Registers the index and the address of the supported synth from the given `swap` pool. The matching currency key must be supplied for a successful registration.\"},\"synthToToken(address,bytes32,uint8,uint256,uint256)\":{\"notice\":\"Initiates a cross-asset swap from a synthetic asset to a supported token. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap.\"},\"tokenToSynth(address,uint8,bytes32,uint256,uint256)\":{\"notice\":\"Initiates a cross-asset swap from a token supported in the `swap` pool to any synthetic asset. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap.\"},\"tokenToToken(address[2],uint8,uint8,uint256,uint256)\":{\"notice\":\"Initiates a cross-asset swap from a token in one Saddle pool to one in another. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap.\"},\"updateExchangerCache()\":{\"notice\":\"Updates the stored address of the `EXCHANGER` contract. When the Synthetix team upgrades their protocol, a new Exchanger contract is deployed. This function manually updates the stored address.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Settles and withdraws the synthetic asset without swapping it to a token in a Saddle pool. Only the owner of the ERC721 token of `itemId` can call this function. Reverts if the given `itemId` does not represent a `synthToToken` or a `tokenToToken` swap.\"}},\"notice\":\"This contract is responsible for cross-asset swaps using the Synthetix protocol as the bridging exchange. There are three types of supported cross-asset swaps, tokenToSynth, synthToToken, and tokenToToken. 1) tokenToSynth Swaps a supported token in a saddle pool to any synthetic asset (e.g. tBTC -> sAAVE). 2) synthToToken Swaps any synthetic asset to a suported token in a saddle pool (e.g. sDEFI -> USDC). 3) tokenToToken Swaps a supported token in a saddle pool to one in another pool (e.g. renBTC -> DAI). Due to the settlement periods of synthetic assets, the users must wait until the trades can be completed. Users will receive an ERC721 token that represents pending cross-asset swap. Once the waiting period is over, the trades can be settled and completed by calling the `completeToSynth` or the `completeToToken` function. In the cases of pending `synthToToken` or `tokenToToken` swaps, the owners of the pending swaps can also choose to withdraw the bridging synthetic assets instead of completing the swap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VirtualSwap/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0d24348f536f928d8b42789737bf34762faee065667ab530ea20969a9d9920d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\",\"license\":\"MIT\"},\"contracts/VirtualSwap/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IAddressResolver.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IExchanger.sol\\\";\\nimport \\\"synthetix/contracts/interfaces/IExchangeRates.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"./SynthSwapper.sol\\\";\\n\\ncontract Proxy {\\n    address public target;\\n}\\n\\ncontract Target {\\n    address public proxy;\\n}\\n\\n/**\\n * @title Bridge\\n * @notice This contract is responsible for cross-asset swaps using the Synthetix protocol as the bridging exchange.\\n * There are three types of supported cross-asset swaps, tokenToSynth, synthToToken, and tokenToToken.\\n *\\n * 1) tokenToSynth\\n * Swaps a supported token in a saddle pool to any synthetic asset (e.g. tBTC -> sAAVE).\\n *\\n * 2) synthToToken\\n * Swaps any synthetic asset to a suported token in a saddle pool (e.g. sDEFI -> USDC).\\n *\\n * 3) tokenToToken\\n * Swaps a supported token in a saddle pool to one in another pool (e.g. renBTC -> DAI).\\n *\\n * Due to the settlement periods of synthetic assets, the users must wait until the trades can be completed.\\n * Users will receive an ERC721 token that represents pending cross-asset swap. Once the waiting period is over,\\n * the trades can be settled and completed by calling the `completeToSynth` or the `completeToToken` function.\\n * In the cases of pending `synthToToken` or `tokenToToken` swaps, the owners of the pending swaps can also choose\\n * to withdraw the bridging synthetic assets instead of completing the swap.\\n */\\ncontract Bridge is ERC721 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event SynthIndex(\\n        address indexed swap,\\n        uint8 synthIndex,\\n        bytes32 currencyKey,\\n        address synthAddress\\n    );\\n    event TokenToSynth(\\n        address indexed requester,\\n        uint256 indexed itemId,\\n        ISwap swapPool,\\n        uint8 tokenFromIndex,\\n        uint256 tokenFromInAmount,\\n        bytes32 synthToKey\\n    );\\n    event SynthToToken(\\n        address indexed requester,\\n        uint256 indexed itemId,\\n        ISwap swapPool,\\n        bytes32 synthFromKey,\\n        uint256 synthFromInAmount,\\n        uint8 tokenToIndex\\n    );\\n    event TokenToToken(\\n        address indexed requester,\\n        uint256 indexed itemId,\\n        ISwap[2] swapPools,\\n        uint8 tokenFromIndex,\\n        uint256 tokenFromAmount,\\n        uint8 tokenToIndex\\n    );\\n    event Settle(\\n        address indexed requester,\\n        uint256 indexed itemId,\\n        IERC20 settleFrom,\\n        uint256 settleFromAmount,\\n        IERC20 settleTo,\\n        uint256 settleToAmount,\\n        bool isFinal\\n    );\\n    event Withdraw(\\n        address indexed requester,\\n        uint256 indexed itemId,\\n        IERC20 synth,\\n        uint256 synthAmount,\\n        bool isFinal\\n    );\\n\\n    // The addresses for all Synthetix contracts can be found in the below URL.\\n    // https://docs.synthetix.io/addresses/#mainnet-contracts\\n    //\\n    // Since the Synthetix protocol is upgradable, we must use the proxy pairs of each contract such that\\n    // the composability is not broken after the protocol upgrade.\\n    //\\n    // SYNTHETIX_RESOLVER points to `ReadProxyAddressResolver` (0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2).\\n    // This contract is a read proxy of `AddressResolver` which is responsible for storing the addresses of the contracts\\n    // used by the Synthetix protocol.\\n    IAddressResolver public constant SYNTHETIX_RESOLVER =\\n        IAddressResolver(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\\n\\n    // EXCHANGER points to `Exchanger`. There is no proxy pair for this contract so we need to update this variable\\n    // when the protocol is upgraded. This contract is used to settle synths held by SynthSwapper.\\n    IExchanger public exchanger;\\n\\n    // CONSTANTS\\n\\n    // Available types of cross-asset swaps\\n    enum PendingSwapType {\\n        Null,\\n        TokenToSynth,\\n        SynthToToken,\\n        TokenToToken\\n    }\\n\\n    uint256 public constant MAX_UINT256 = 2**256 - 1;\\n    uint8 public constant MAX_UINT8 = 2**8 - 1;\\n    bytes32 public constant EXCHANGE_RATES_NAME = \\\"ExchangeRates\\\";\\n    bytes32 public constant EXCHANGER_NAME = \\\"Exchanger\\\";\\n    address public immutable SYNTH_SWAPPER_MASTER;\\n\\n    // MAPPINGS FOR STORING PENDING SETTLEMENTS\\n    // The below two mappings never share the same key.\\n    mapping(uint256 => PendingToSynthSwap) public pendingToSynthSwaps;\\n    mapping(uint256 => PendingToTokenSwap) public pendingToTokenSwaps;\\n    uint256 public pendingSwapsLength;\\n    mapping(uint256 => PendingSwapType) private pendingSwapType;\\n\\n    // MAPPINGS FOR STORING SYNTH INFO\\n    mapping(address => SwapContractInfo) private swapContracts;\\n\\n    // Structs holding information about pending settlements\\n    struct PendingToSynthSwap {\\n        SynthSwapper swapper;\\n        bytes32 synthKey;\\n    }\\n\\n    struct PendingToTokenSwap {\\n        SynthSwapper swapper;\\n        bytes32 synthKey;\\n        ISwap swap;\\n        uint8 tokenToIndex;\\n    }\\n\\n    struct SwapContractInfo {\\n        // index of the supported synth + 1\\n        uint8 synthIndexPlusOne;\\n        // address of the supported synth\\n        address synthAddress;\\n        // bytes32 key of the supported synth\\n        bytes32 synthKey;\\n        // array of tokens supported by the contract\\n        IERC20[] tokens;\\n    }\\n\\n    /**\\n     * @notice Deploys this contract and initializes the master version of the SynthSwapper contract. The address to\\n     * the Synthetix protocol's Exchanger contract is also set on deployment.\\n     */\\n    constructor(address synthSwapperAddress)\\n        public\\n        ERC721(\\\"Saddle Cross-Asset Swap\\\", \\\"SaddleSynthSwap\\\")\\n    {\\n        SYNTH_SWAPPER_MASTER = synthSwapperAddress;\\n        updateExchangerCache();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the proxy contract targeting the synthetic asset with the given `synthKey`.\\n     * @param synthKey the currency key of the synth\\n     * @return address of the proxy contract\\n     */\\n    function getProxyAddressFromTargetSynthKey(bytes32 synthKey)\\n        public\\n        view\\n        returns (IERC20)\\n    {\\n        return IERC20(Target(SYNTHETIX_RESOLVER.getSynth(synthKey)).proxy());\\n    }\\n\\n    /**\\n     * @notice Returns various information of a pending swap represented by the given `itemId`. Information includes\\n     * the type of the pending swap, the number of seconds left until it can be settled, the address and the balance\\n     * of the synth this swap currently holds, and the address of the destination token.\\n     * @param itemId ID of the pending swap\\n     * @return swapType the type of the pending virtual swap,\\n     * secsLeft number of seconds left until this swap can be settled,\\n     * synth address of the synth this swap uses,\\n     * synthBalance amount of the synth this swap holds,\\n     * tokenTo the address of the destination token\\n     */\\n    function getPendingSwapInfo(uint256 itemId)\\n        external\\n        view\\n        returns (\\n            PendingSwapType swapType,\\n            uint256 secsLeft,\\n            address synth,\\n            uint256 synthBalance,\\n            address tokenTo\\n        )\\n    {\\n        swapType = pendingSwapType[itemId];\\n        require(swapType != PendingSwapType.Null, \\\"invalid itemId\\\");\\n\\n        SynthSwapper synthSwapper;\\n        bytes32 synthKey;\\n\\n        if (swapType == PendingSwapType.TokenToSynth) {\\n            synthSwapper = pendingToSynthSwaps[itemId].swapper;\\n            synthKey = pendingToSynthSwaps[itemId].synthKey;\\n            synth = address(getProxyAddressFromTargetSynthKey(synthKey));\\n            tokenTo = synth;\\n        } else {\\n            PendingToTokenSwap memory pendingToTokenSwap = pendingToTokenSwaps[\\n                itemId\\n            ];\\n            synthSwapper = pendingToTokenSwap.swapper;\\n            synthKey = pendingToTokenSwap.synthKey;\\n            synth = address(getProxyAddressFromTargetSynthKey(synthKey));\\n            tokenTo = address(\\n                swapContracts[address(pendingToTokenSwap.swap)].tokens[\\n                    pendingToTokenSwap.tokenToIndex\\n                ]\\n            );\\n        }\\n\\n        secsLeft = exchanger.maxSecsLeftInWaitingPeriod(\\n            address(synthSwapper),\\n            synthKey\\n        );\\n        synthBalance = IERC20(synth).balanceOf(address(synthSwapper));\\n    }\\n\\n    // Settles the synth only.\\n    function _settle(address synthOwner, bytes32 synthKey) internal {\\n        // Settle synth\\n        exchanger.settle(synthOwner, synthKey);\\n    }\\n\\n    /**\\n     * @notice Settles and withdraws the synthetic asset without swapping it to a token in a Saddle pool. Only the owner\\n     * of the ERC721 token of `itemId` can call this function. Reverts if the given `itemId` does not represent a\\n     * `synthToToken` or a `tokenToToken` swap.\\n     * @param itemId ID of the pending swap\\n     * @param amount the amount of the synth to withdraw\\n     */\\n    function withdraw(uint256 itemId, uint256 amount) external {\\n        address nftOwner = ownerOf(itemId);\\n        require(nftOwner == msg.sender, \\\"not owner\\\");\\n        require(\\n            pendingSwapType[itemId] > PendingSwapType.TokenToSynth,\\n            \\\"invalid itemId\\\"\\n        );\\n        PendingToTokenSwap memory pendingToTokenSwap = pendingToTokenSwaps[\\n            itemId\\n        ];\\n        _settle(\\n            address(pendingToTokenSwap.swapper),\\n            pendingToTokenSwap.synthKey\\n        );\\n\\n        IERC20 synth = getProxyAddressFromTargetSynthKey(\\n            pendingToTokenSwap.synthKey\\n        );\\n        bool shouldDestroy;\\n\\n        if (amount >= synth.balanceOf(address(pendingToTokenSwap.swapper))) {\\n            _burn(itemId);\\n            delete pendingToTokenSwaps[itemId];\\n            delete pendingSwapType[itemId];\\n            shouldDestroy = true;\\n        }\\n\\n        pendingToTokenSwap.swapper.withdraw(\\n            synth,\\n            nftOwner,\\n            amount,\\n            shouldDestroy\\n        );\\n        emit Withdraw(msg.sender, itemId, synth, amount, shouldDestroy);\\n    }\\n\\n    /**\\n     * @notice Completes the pending `tokenToSynth` swap by settling and withdrawing the synthetic asset.\\n     * Reverts if the given `itemId` does not represent a `tokenToSynth` swap.\\n     * @param itemId ERC721 token ID representing a pending `tokenToSynth` swap\\n     */\\n    function completeToSynth(uint256 itemId) external {\\n        address nftOwner = ownerOf(itemId);\\n        require(nftOwner == msg.sender, \\\"not owner\\\");\\n        require(\\n            pendingSwapType[itemId] == PendingSwapType.TokenToSynth,\\n            \\\"invalid itemId\\\"\\n        );\\n\\n        PendingToSynthSwap memory pendingToSynthSwap = pendingToSynthSwaps[\\n            itemId\\n        ];\\n        _settle(\\n            address(pendingToSynthSwap.swapper),\\n            pendingToSynthSwap.synthKey\\n        );\\n\\n        IERC20 synth = getProxyAddressFromTargetSynthKey(\\n            pendingToSynthSwap.synthKey\\n        );\\n\\n        // Burn the corresponding ERC721 token and delete storage for gas\\n        _burn(itemId);\\n        delete pendingToTokenSwaps[itemId];\\n        delete pendingSwapType[itemId];\\n\\n        // After settlement, withdraw the synth and send it to the recipient\\n        uint256 synthBalance = synth.balanceOf(\\n            address(pendingToSynthSwap.swapper)\\n        );\\n        pendingToSynthSwap.swapper.withdraw(\\n            synth,\\n            nftOwner,\\n            synthBalance,\\n            true\\n        );\\n\\n        emit Settle(\\n            msg.sender,\\n            itemId,\\n            synth,\\n            synthBalance,\\n            synth,\\n            synthBalance,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the expected amount of the token to receive on calling `completeToToken()` with\\n     * the given `swapAmount`.\\n     * @param itemId ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap\\n     * @param swapAmount the amount of bridging synth to swap from\\n     * @return expected amount of the token the user will receive\\n     */\\n    function calcCompleteToToken(uint256 itemId, uint256 swapAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            pendingSwapType[itemId] > PendingSwapType.TokenToSynth,\\n            \\\"invalid itemId\\\"\\n        );\\n\\n        PendingToTokenSwap memory pendingToTokenSwap = pendingToTokenSwaps[\\n            itemId\\n        ];\\n        return\\n            pendingToTokenSwap.swap.calculateSwap(\\n                getSynthIndex(pendingToTokenSwap.swap),\\n                pendingToTokenSwap.tokenToIndex,\\n                swapAmount\\n            );\\n    }\\n\\n    /**\\n     * @notice Completes the pending `SynthToToken` or `TokenToToken` swap by settling the bridging synth and swapping\\n     * it to the desired token. Only the owners of the pending swaps can call this function.\\n     * @param itemId ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap\\n     * @param swapAmount the amount of bridging synth to swap from\\n     * @param minAmount the minimum amount of the token to receive - reverts if this amount is not reached\\n     * @param deadline the timestamp representing the deadline for this transaction - reverts if deadline is not met\\n     */\\n    function completeToToken(\\n        uint256 itemId,\\n        uint256 swapAmount,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external {\\n        require(swapAmount != 0, \\\"amount must be greater than 0\\\");\\n        address nftOwner = ownerOf(itemId);\\n        require(msg.sender == nftOwner, \\\"must own itemId\\\");\\n        require(\\n            pendingSwapType[itemId] > PendingSwapType.TokenToSynth,\\n            \\\"invalid itemId\\\"\\n        );\\n\\n        PendingToTokenSwap memory pendingToTokenSwap = pendingToTokenSwaps[\\n            itemId\\n        ];\\n\\n        _settle(\\n            address(pendingToTokenSwap.swapper),\\n            pendingToTokenSwap.synthKey\\n        );\\n        IERC20 synth = getProxyAddressFromTargetSynthKey(\\n            pendingToTokenSwap.synthKey\\n        );\\n        bool shouldDestroyClone;\\n\\n        if (\\n            swapAmount >= synth.balanceOf(address(pendingToTokenSwap.swapper))\\n        ) {\\n            _burn(itemId);\\n            delete pendingToTokenSwaps[itemId];\\n            delete pendingSwapType[itemId];\\n            shouldDestroyClone = true;\\n        }\\n\\n        // Try swapping the synth to the desired token via the stored swap pool contract\\n        // If the external call succeeds, send the token to the owner of token with itemId.\\n        (IERC20 tokenTo, uint256 amountOut) = pendingToTokenSwap\\n            .swapper\\n            .swapSynthToToken(\\n                pendingToTokenSwap.swap,\\n                synth,\\n                getSynthIndex(pendingToTokenSwap.swap),\\n                pendingToTokenSwap.tokenToIndex,\\n                swapAmount,\\n                minAmount,\\n                deadline,\\n                nftOwner\\n            );\\n\\n        if (shouldDestroyClone) {\\n            pendingToTokenSwap.swapper.destroy();\\n        }\\n\\n        emit Settle(\\n            msg.sender,\\n            itemId,\\n            synth,\\n            swapAmount,\\n            tokenTo,\\n            amountOut,\\n            shouldDestroyClone\\n        );\\n    }\\n\\n    // Add the given pending synth settlement struct to the list\\n    function _addToPendingSynthSwapList(\\n        PendingToSynthSwap memory pendingToSynthSwap\\n    ) internal returns (uint256) {\\n        require(\\n            pendingSwapsLength < MAX_UINT256,\\n            \\\"pendingSwapsLength reached max size\\\"\\n        );\\n        pendingToSynthSwaps[pendingSwapsLength] = pendingToSynthSwap;\\n        return pendingSwapsLength++;\\n    }\\n\\n    // Add the given pending synth to token settlement struct to the list\\n    function _addToPendingSynthToTokenSwapList(\\n        PendingToTokenSwap memory pendingToTokenSwap\\n    ) internal returns (uint256) {\\n        require(\\n            pendingSwapsLength < MAX_UINT256,\\n            \\\"pendingSwapsLength reached max size\\\"\\n        );\\n        pendingToTokenSwaps[pendingSwapsLength] = pendingToTokenSwap;\\n        return pendingSwapsLength++;\\n    }\\n\\n    /**\\n     * @notice Calculates the expected amount of the desired synthetic asset the caller will receive after completing\\n     * a `TokenToSynth` swap with the given parameters. This calculation does not consider the settlement periods.\\n     * @param swap the address of a Saddle pool to use to swap the given token to a bridging synth\\n     * @param tokenFromIndex the index of the token to swap from\\n     * @param synthOutKey the currency key of the desired synthetic asset\\n     * @param tokenInAmount the amount of the token to swap form\\n     * @return the expected amount of the desired synth\\n     */\\n    function calcTokenToSynth(\\n        ISwap swap,\\n        uint8 tokenFromIndex,\\n        bytes32 synthOutKey,\\n        uint256 tokenInAmount\\n    ) external view returns (uint256) {\\n        uint8 mediumSynthIndex = getSynthIndex(swap);\\n        uint256 expectedMediumSynthAmount = swap.calculateSwap(\\n            tokenFromIndex,\\n            mediumSynthIndex,\\n            tokenInAmount\\n        );\\n        bytes32 mediumSynthKey = getSynthKey(swap);\\n\\n        IExchangeRates exchangeRates = IExchangeRates(\\n            SYNTHETIX_RESOLVER.getAddress(EXCHANGE_RATES_NAME)\\n        );\\n        return\\n            exchangeRates.effectiveValue(\\n                mediumSynthKey,\\n                expectedMediumSynthAmount,\\n                synthOutKey\\n            );\\n    }\\n\\n    /**\\n     * @notice Initiates a cross-asset swap from a token supported in the `swap` pool to any synthetic asset.\\n     * The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap.\\n     * @param swap the address of a Saddle pool to use to swap the given token to a bridging synth\\n     * @param tokenFromIndex the index of the token to swap from\\n     * @param synthOutKey the currency key of the desired synthetic asset\\n     * @param tokenInAmount the amount of the token to swap form\\n     * @param minAmount the amount of the token to swap form\\n     * @return ID of the ERC721 token sent to the caller\\n     */\\n    function tokenToSynth(\\n        ISwap swap,\\n        uint8 tokenFromIndex,\\n        bytes32 synthOutKey,\\n        uint256 tokenInAmount,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        require(tokenInAmount != 0, \\\"amount must be greater than 0\\\");\\n        // Create a SynthSwapper clone\\n        SynthSwapper synthSwapper = SynthSwapper(\\n            Clones.clone(SYNTH_SWAPPER_MASTER)\\n        );\\n        synthSwapper.initialize();\\n\\n        // Add the synthswapper to the pending settlement list\\n        uint256 itemId = _addToPendingSynthSwapList(\\n            PendingToSynthSwap(synthSwapper, synthOutKey)\\n        );\\n        pendingSwapType[itemId] = PendingSwapType.TokenToSynth;\\n\\n        // Mint an ERC721 token that represents ownership of the pending synth settlement to msg.sender\\n        _mint(msg.sender, itemId);\\n\\n        // Transfer token from msg.sender\\n        IERC20 tokenFrom = swapContracts[address(swap)].tokens[tokenFromIndex]; // revert when token not found in swap pool\\n        tokenFrom.safeTransferFrom(msg.sender, address(this), tokenInAmount);\\n        tokenInAmount = tokenFrom.balanceOf(address(this));\\n\\n        // Swap the synth to the medium synth\\n        uint256 mediumSynthAmount = swap.swap(\\n            tokenFromIndex,\\n            getSynthIndex(swap),\\n            tokenInAmount,\\n            0,\\n            block.timestamp\\n        );\\n\\n        // Swap synths via Synthetix network\\n        IERC20(getSynthAddress(swap)).safeTransfer(\\n            address(synthSwapper),\\n            mediumSynthAmount\\n        );\\n        require(\\n            synthSwapper.swapSynth(\\n                getSynthKey(swap),\\n                mediumSynthAmount,\\n                synthOutKey\\n            ) >= minAmount,\\n            \\\"minAmount not reached\\\"\\n        );\\n\\n        // Emit TokenToSynth event with relevant data\\n        emit TokenToSynth(\\n            msg.sender,\\n            itemId,\\n            swap,\\n            tokenFromIndex,\\n            tokenInAmount,\\n            synthOutKey\\n        );\\n\\n        return (itemId);\\n    }\\n\\n    /**\\n     * @notice Calculates the expected amount of the desired token the caller will receive after completing\\n     * a `SynthToToken` swap with the given parameters. This calculation does not consider the settlement periods or\\n     * any potential changes of the `swap` pool composition.\\n     * @param swap the address of a Saddle pool to use to swap the given token to a bridging synth\\n     * @param synthInKey the currency key of the synth to swap from\\n     * @param tokenToIndex the index of the token to swap to\\n     * @param synthInAmount the amount of the synth to swap form\\n     * @return the expected amount of the bridging synth and the expected amount of the desired token\\n     */\\n    function calcSynthToToken(\\n        ISwap swap,\\n        bytes32 synthInKey,\\n        uint8 tokenToIndex,\\n        uint256 synthInAmount\\n    ) external view returns (uint256, uint256) {\\n        IExchangeRates exchangeRates = IExchangeRates(\\n            SYNTHETIX_RESOLVER.getAddress(EXCHANGE_RATES_NAME)\\n        );\\n\\n        uint8 mediumSynthIndex = getSynthIndex(swap);\\n        bytes32 mediumSynthKey = getSynthKey(swap);\\n        require(synthInKey != mediumSynthKey, \\\"use normal swap\\\");\\n\\n        uint256 expectedMediumSynthAmount = exchangeRates.effectiveValue(\\n            synthInKey,\\n            synthInAmount,\\n            mediumSynthKey\\n        );\\n\\n        return (\\n            expectedMediumSynthAmount,\\n            swap.calculateSwap(\\n                mediumSynthIndex,\\n                tokenToIndex,\\n                expectedMediumSynthAmount\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Initiates a cross-asset swap from a synthetic asset to a supported token. The caller will receive\\n     * an ERC721 token representing their ownership of the pending cross-asset swap.\\n     * @param swap the address of a Saddle pool to use to swap the given token to a bridging synth\\n     * @param synthInKey the currency key of the synth to swap from\\n     * @param tokenToIndex the index of the token to swap to\\n     * @param synthInAmount the amount of the synth to swap form\\n     * @param minMediumSynthAmount the minimum amount of the bridging synth at pre-settlement stage\\n     * @return the ID of the ERC721 token sent to the caller\\n     */\\n    function synthToToken(\\n        ISwap swap,\\n        bytes32 synthInKey,\\n        uint8 tokenToIndex,\\n        uint256 synthInAmount,\\n        uint256 minMediumSynthAmount\\n    ) external returns (uint256) {\\n        require(synthInAmount != 0, \\\"amount must be greater than 0\\\");\\n        bytes32 mediumSynthKey = getSynthKey(swap);\\n        require(\\n            synthInKey != mediumSynthKey,\\n            \\\"synth is supported via normal swap\\\"\\n        );\\n\\n        // Create a SynthSwapper clone\\n        SynthSwapper synthSwapper = SynthSwapper(\\n            Clones.clone(SYNTH_SWAPPER_MASTER)\\n        );\\n        synthSwapper.initialize();\\n\\n        // Add the synthswapper to the pending synth to token settlement list\\n        uint256 itemId = _addToPendingSynthToTokenSwapList(\\n            PendingToTokenSwap(synthSwapper, mediumSynthKey, swap, tokenToIndex)\\n        );\\n        pendingSwapType[itemId] = PendingSwapType.SynthToToken;\\n\\n        // Mint an ERC721 token that represents ownership of the pending synth to token settlement to msg.sender\\n        _mint(msg.sender, itemId);\\n\\n        // Receive synth from the user and swap it to another synth\\n        IERC20 synthFrom = getProxyAddressFromTargetSynthKey(synthInKey);\\n        synthFrom.safeTransferFrom(msg.sender, address(this), synthInAmount);\\n        synthFrom.safeTransfer(address(synthSwapper), synthInAmount);\\n        require(\\n            synthSwapper.swapSynth(synthInKey, synthInAmount, mediumSynthKey) >=\\n                minMediumSynthAmount,\\n            \\\"minMediumSynthAmount not reached\\\"\\n        );\\n\\n        // Emit SynthToToken event with relevant data\\n        emit SynthToToken(\\n            msg.sender,\\n            itemId,\\n            swap,\\n            synthInKey,\\n            synthInAmount,\\n            tokenToIndex\\n        );\\n\\n        return (itemId);\\n    }\\n\\n    /**\\n     * @notice Calculates the expected amount of the desired token the caller will receive after completing\\n     * a `TokenToToken` swap with the given parameters. This calculation does not consider the settlement periods or\\n     * any potential changes of the pool compositions.\\n     * @param swaps the addresses of the two Saddle pools used to do the cross-asset swap\\n     * @param tokenFromIndex the index of the token in the first `swaps` pool to swap from\\n     * @param tokenToIndex the index of the token in the second `swaps` pool to swap to\\n     * @param tokenFromAmount the amount of the token to swap from\\n     * @return the expected amount of bridging synth at pre-settlement stage and the expected amount of the desired\\n     * token\\n     */\\n    function calcTokenToToken(\\n        ISwap[2] calldata swaps,\\n        uint8 tokenFromIndex,\\n        uint8 tokenToIndex,\\n        uint256 tokenFromAmount\\n    ) external view returns (uint256, uint256) {\\n        IExchangeRates exchangeRates = IExchangeRates(\\n            SYNTHETIX_RESOLVER.getAddress(EXCHANGE_RATES_NAME)\\n        );\\n\\n        uint256 firstSynthAmount = swaps[0].calculateSwap(\\n            tokenFromIndex,\\n            getSynthIndex(swaps[0]),\\n            tokenFromAmount\\n        );\\n\\n        uint256 mediumSynthAmount = exchangeRates.effectiveValue(\\n            getSynthKey(swaps[0]),\\n            firstSynthAmount,\\n            getSynthKey(swaps[1])\\n        );\\n\\n        return (\\n            mediumSynthAmount,\\n            swaps[1].calculateSwap(\\n                getSynthIndex(swaps[1]),\\n                tokenToIndex,\\n                mediumSynthAmount\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Initiates a cross-asset swap from a token in one Saddle pool to one in another. The caller will receive\\n     * an ERC721 token representing their ownership of the pending cross-asset swap.\\n     * @param swaps the addresses of the two Saddle pools used to do the cross-asset swap\\n     * @param tokenFromIndex the index of the token in the first `swaps` pool to swap from\\n     * @param tokenToIndex the index of the token in the second `swaps` pool to swap to\\n     * @param tokenFromAmount the amount of the token to swap from\\n     * @param minMediumSynthAmount the minimum amount of the bridging synth at pre-settlement stage\\n     * @return the ID of the ERC721 token sent to the caller\\n     */\\n    function tokenToToken(\\n        ISwap[2] calldata swaps,\\n        uint8 tokenFromIndex,\\n        uint8 tokenToIndex,\\n        uint256 tokenFromAmount,\\n        uint256 minMediumSynthAmount\\n    ) external returns (uint256) {\\n        // Create a SynthSwapper clone\\n        require(tokenFromAmount != 0, \\\"amount must be greater than 0\\\");\\n        SynthSwapper synthSwapper = SynthSwapper(\\n            Clones.clone(SYNTH_SWAPPER_MASTER)\\n        );\\n        synthSwapper.initialize();\\n        bytes32 mediumSynthKey = getSynthKey(swaps[1]);\\n\\n        // Add the synthswapper to the pending synth to token settlement list\\n        uint256 itemId = _addToPendingSynthToTokenSwapList(\\n            PendingToTokenSwap(\\n                synthSwapper,\\n                mediumSynthKey,\\n                swaps[1],\\n                tokenToIndex\\n            )\\n        );\\n        pendingSwapType[itemId] = PendingSwapType.TokenToToken;\\n\\n        // Mint an ERC721 token that represents ownership of the pending swap to msg.sender\\n        _mint(msg.sender, itemId);\\n\\n        // Receive token from the user\\n        ISwap swap = swaps[0];\\n        {\\n            IERC20 tokenFrom = swapContracts[address(swap)].tokens[\\n                tokenFromIndex\\n            ];\\n            tokenFrom.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenFromAmount\\n            );\\n        }\\n\\n        uint256 firstSynthAmount = swap.swap(\\n            tokenFromIndex,\\n            getSynthIndex(swap),\\n            tokenFromAmount,\\n            0,\\n            block.timestamp\\n        );\\n\\n        // Swap the synth to another synth\\n        IERC20(getSynthAddress(swap)).safeTransfer(\\n            address(synthSwapper),\\n            firstSynthAmount\\n        );\\n        require(\\n            synthSwapper.swapSynth(\\n                getSynthKey(swap),\\n                firstSynthAmount,\\n                mediumSynthKey\\n            ) >= minMediumSynthAmount,\\n            \\\"minMediumSynthAmount not reached\\\"\\n        );\\n\\n        // Emit TokenToToken event with relevant data\\n        emit TokenToToken(\\n            msg.sender,\\n            itemId,\\n            swaps,\\n            tokenFromIndex,\\n            tokenFromAmount,\\n            tokenToIndex\\n        );\\n\\n        return (itemId);\\n    }\\n\\n    /**\\n     * @notice Registers the index and the address of the supported synth from the given `swap` pool. The matching currency key must\\n     * be supplied for a successful registration.\\n     * @param swap the address of the pool that contains the synth\\n     * @param synthIndex the index of the supported synth in the given `swap` pool\\n     * @param currencyKey the currency key of the synth in bytes32 form\\n     */\\n    function setSynthIndex(\\n        ISwap swap,\\n        uint8 synthIndex,\\n        bytes32 currencyKey\\n    ) external {\\n        require(synthIndex < MAX_UINT8, \\\"index is too large\\\");\\n        SwapContractInfo storage swapContractInfo = swapContracts[\\n            address(swap)\\n        ];\\n        // Check if the pool has already been added\\n        require(swapContractInfo.synthIndexPlusOne == 0, \\\"Pool already added\\\");\\n        // Ensure the synth with the same currency key exists at the given `synthIndex`\\n        IERC20 synth = swap.getToken(synthIndex);\\n        require(\\n            ISynth(Proxy(address(synth)).target()).currencyKey() == currencyKey,\\n            \\\"currencyKey does not match\\\"\\n        );\\n        swapContractInfo.synthIndexPlusOne = synthIndex + 1;\\n        swapContractInfo.synthAddress = address(synth);\\n        swapContractInfo.synthKey = currencyKey;\\n        swapContractInfo.tokens = new IERC20[](0);\\n\\n        for (uint8 i = 0; i < MAX_UINT8; i++) {\\n            IERC20 token;\\n            if (i == synthIndex) {\\n                token = synth;\\n            } else {\\n                try swap.getToken(i) returns (IERC20 token_) {\\n                    token = token_;\\n                } catch {\\n                    break;\\n                }\\n            }\\n            swapContractInfo.tokens.push(token);\\n            token.safeApprove(address(swap), MAX_UINT256);\\n        }\\n\\n        emit SynthIndex(address(swap), synthIndex, currencyKey, address(synth));\\n    }\\n\\n    /**\\n     * @notice Returns the index of the supported synth in the given `swap` pool. Reverts if the `swap` pool\\n     * is not registered.\\n     * @param swap the address of the pool that contains the synth\\n     * @return the index of the supported synth\\n     */\\n    function getSynthIndex(ISwap swap) public view returns (uint8) {\\n        uint8 synthIndexPlusOne = swapContracts[address(swap)]\\n            .synthIndexPlusOne;\\n        require(synthIndexPlusOne > 0, \\\"synth index not found for given pool\\\");\\n        return synthIndexPlusOne - 1;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the supported synth in the given `swap` pool. Reverts if the `swap` pool\\n     * is not registered.\\n     * @param swap the address of the pool that contains the synth\\n     * @return the address of the supported synth\\n     */\\n    function getSynthAddress(ISwap swap) public view returns (address) {\\n        address synthAddress = swapContracts[address(swap)].synthAddress;\\n        require(\\n            synthAddress != address(0),\\n            \\\"synth addr not found for given pool\\\"\\n        );\\n        return synthAddress;\\n    }\\n\\n    /**\\n     * @notice Returns the currency key of the supported synth in the given `swap` pool. Reverts if the `swap` pool\\n     * is not registered.\\n     * @param swap the address of the pool that contains the synth\\n     * @return the currency key of the supported synth\\n     */\\n    function getSynthKey(ISwap swap) public view returns (bytes32) {\\n        bytes32 synthKey = swapContracts[address(swap)].synthKey;\\n        require(synthKey != 0x0, \\\"synth key not found for given pool\\\");\\n        return synthKey;\\n    }\\n\\n    /**\\n     * @notice Updates the stored address of the `EXCHANGER` contract. When the Synthetix team upgrades their protocol,\\n     * a new Exchanger contract is deployed. This function manually updates the stored address.\\n     */\\n    function updateExchangerCache() public {\\n        exchanger = IExchanger(SYNTHETIX_RESOLVER.getAddress(EXCHANGER_NAME));\\n    }\\n}\\n\",\"keccak256\":\"0xd992ad0988c64ae90faeaba0ac91cf65d3b8e127fa023dc8b789ebf30cee341e\",\"license\":\"MIT\"},\"contracts/VirtualSwap/SynthSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"synthetix/contracts/interfaces/ISynthetix.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title SynthSwapper\\n * @notice Replacement of Virtual Synths in favor of gas savings. Allows swapping synths via the Synthetix protocol\\n * or Saddle's pools. The `Bridge.sol` contract will deploy minimal clones of this contract upon initiating\\n * any cross-asset swaps.\\n */\\ncontract SynthSwapper is Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    address payable owner;\\n    // SYNTHETIX points to `ProxyERC20` (0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F).\\n    // This contract is a proxy of `Synthetix` and is used to exchange synths.\\n    ISynthetix public constant SYNTHETIX =\\n        ISynthetix(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\\n    // \\\"SADDLE\\\" in bytes32 form\\n    bytes32 public constant TRACKING =\\n        0x534144444c450000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n     * @notice Initializes the contract when deploying this directly. This prevents\\n     * others from calling initialize() on the target contract and setting themself as the owner.\\n     */\\n    constructor() public {\\n        initialize();\\n    }\\n\\n    /**\\n     * @notice This modifier checks if the caller is the owner\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"is not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the `owner` as the caller of this function\\n     */\\n    function initialize() public initializer {\\n        require(owner == address(0), \\\"owner already set\\\");\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Swaps the synth to another synth via the Synthetix protocol.\\n     * @param sourceKey currency key of the source synth\\n     * @param synthAmount amount of the synth to swap\\n     * @param destKey currency key of the destination synth\\n     * @return amount of the destination synth received\\n     */\\n    function swapSynth(\\n        bytes32 sourceKey,\\n        uint256 synthAmount,\\n        bytes32 destKey\\n    ) external onlyOwner returns (uint256) {\\n        return\\n            SYNTHETIX.exchangeWithTracking(\\n                sourceKey,\\n                synthAmount,\\n                destKey,\\n                msg.sender,\\n                TRACKING\\n            );\\n    }\\n\\n    /**\\n     * @notice Approves the given `tokenFrom` and swaps it to another token via the given `swap` pool.\\n     * @param swap the address of a pool to swap through\\n     * @param tokenFrom the address of the stored synth\\n     * @param tokenFromIndex the index of the token to swap from\\n     * @param tokenToIndex the token the user wants to swap to\\n     * @param tokenFromAmount the amount of the token to swap\\n     * @param minAmount the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @param recipient the address of the recipient\\n     */\\n    function swapSynthToToken(\\n        ISwap swap,\\n        IERC20 tokenFrom,\\n        uint8 tokenFromIndex,\\n        uint8 tokenToIndex,\\n        uint256 tokenFromAmount,\\n        uint256 minAmount,\\n        uint256 deadline,\\n        address recipient\\n    ) external onlyOwner returns (IERC20, uint256) {\\n        tokenFrom.approve(address(swap), tokenFromAmount);\\n        swap.swap(\\n            tokenFromIndex,\\n            tokenToIndex,\\n            tokenFromAmount,\\n            minAmount,\\n            deadline\\n        );\\n        IERC20 tokenTo = swap.getToken(tokenToIndex);\\n        uint256 balance = tokenTo.balanceOf(address(this));\\n        tokenTo.safeTransfer(recipient, balance);\\n        return (tokenTo, balance);\\n    }\\n\\n    /**\\n     * @notice Withdraws the given amount of `token` to the `recipient`.\\n     * @param token the address of the token to withdraw\\n     * @param recipient the address of the account to receive the token\\n     * @param withdrawAmount the amount of the token to withdraw\\n     * @param shouldDestroy whether this contract should be destroyed after this call\\n     */\\n    function withdraw(\\n        IERC20 token,\\n        address recipient,\\n        uint256 withdrawAmount,\\n        bool shouldDestroy\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, withdrawAmount);\\n        if (shouldDestroy) {\\n            _destroy();\\n        }\\n    }\\n\\n    /**\\n     * @notice Destroys this contract. Only owner can call this function.\\n     */\\n    function destroy() external onlyOwner {\\n        _destroy();\\n    }\\n\\n    function _destroy() internal {\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09826c4e9d10c7cf6a8241b435b77926cb368729f6355c8e6b42b805959fff59\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf55e4d678d05bc5d0e24ec5f24504d7437b885e19579f9d29152748c3c1c732e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9a65f3e1ca7c1dbd29e3fffd1c658c8a9ad0c197fbb9a49390844bb7924bc10\",\"license\":\"MIT\"},\"synthetix/contracts/interfaces/IAddressResolver.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\",\"keccak256\":\"0x53b90229342b01d3cbf2c27a310ee8cbace56aa2cdab95ec64ed5d2706e506c0\"},\"synthetix/contracts/interfaces/IExchangeRates.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    struct InversePricing {\\n        uint entryPoint;\\n        uint upperLimit;\\n        uint lowerLimit;\\n        bool frozenAtUpperLimit;\\n        bool frozenAtLowerLimit;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\\n\\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\\n\\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\\n\\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveValueAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    ) external view returns (uint value);\\n\\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function inversePricing(bytes32 currencyKey)\\n        external\\n        view\\n        returns (\\n            uint entryPoint,\\n            uint upperLimit,\\n            uint lowerLimit,\\n            bool frozenAtUpperLimit,\\n            bool frozenAtLowerLimit\\n        );\\n\\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\\n        external\\n        view\\n        returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\\n        external\\n        view\\n        returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\\n\\n    // Mutative functions\\n    function freezeRate(bytes32 currencyKey) external;\\n}\\n\",\"keccak256\":\"0x018db4c875f3744f3b97a8b31cb1cb529d25417a7a5bd82b7002b81ed25c361a\"},\"synthetix/contracts/interfaces/IExchanger.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\\ninterface IExchanger {\\n    // Views\\n    function calculateAmountAfterSettlement(\\n        address from,\\n        bytes32 currencyKey,\\n        uint amount,\\n        uint refunded\\n    ) external view returns (uint amountAfterSettlement);\\n\\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\\n\\n    function settlementOwing(address account, bytes32 currencyKey)\\n        external\\n        view\\n        returns (\\n            uint reclaimAmount,\\n            uint rebateAmount,\\n            uint numEntries\\n        );\\n\\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\\n\\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\\n        external\\n        view\\n        returns (uint exchangeFeeRate);\\n\\n    function getAmountsForExchange(\\n        uint sourceAmount,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint amountReceived,\\n            uint fee,\\n            uint exchangeFeeRate\\n        );\\n\\n    function priceDeviationThresholdFactor() external view returns (uint);\\n\\n    function waitingPeriodSecs() external view returns (uint);\\n\\n    // Mutative functions\\n    function exchange(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTracking(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalfWithTracking(\\n        address exchangeForAddress,\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithVirtual(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function settle(address from, bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint rate) external;\\n\\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\\n}\\n\",\"keccak256\":\"0x20337d762ea4479d249c10603d1c5b0ee684f77d43a6ac16f36c728766907e2e\"},\"synthetix/contracts/interfaces/ISynth.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\\n\",\"keccak256\":\"0xcdb8d219459295715a21042072a51b45215687a314f2fbe783ec86396aad3f63\"},\"synthetix/contracts/interfaces/ISynthetix.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\\ninterface ISynthetix {\\n    // Views\\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\\n\\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\\n\\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\\n\\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\\n\\n    function transferableSynthetix(address account) external view returns (uint transferable);\\n\\n    // Mutative Functions\\n    function burnSynths(uint amount) external;\\n\\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\\n\\n    function burnSynthsToTarget() external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalfWithTracking(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address originator,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithVirtual(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function issueMaxSynths() external;\\n\\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\\n\\n    function issueSynths(uint amount) external;\\n\\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\\n\\n    function mint() external returns (bool);\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    // Liquidations\\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\\n\\n    // Restricted Functions\\n\\n    function mintSecondary(address account, uint amount) external;\\n\\n    function mintSecondaryRewards(uint amount) external;\\n\\n    function burnSecondary(address account, uint amount) external;\\n}\\n\",\"keccak256\":\"0x34d30cb7faf318a5f91e01e4eecfae3dab2d7ac90f3bdeffebf2691222160f71\"},\"synthetix/contracts/interfaces/IVirtualSynth.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\n\\ninterface IVirtualSynth {\\n    // Views\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function rate() external view returns (uint);\\n\\n    function readyToSettle() external view returns (bool);\\n\\n    function secsLeftInWaitingPeriod() external view returns (uint);\\n\\n    function settled() external view returns (bool);\\n\\n    function synth() external view returns (ISynth);\\n\\n    // Mutative functions\\n    function settle(address account) external;\\n}\\n\",\"keccak256\":\"0x372245f4496b614fa0a2f9a06ea8e621287577ee5101abab2d003fc47e231141\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "calcCompleteToToken(uint256,uint256)": {
        "params": {
          "itemId": "ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap",
          "swapAmount": "the amount of bridging synth to swap from"
        },
        "returns": {
          "_0": "expected amount of the token the user will receive"
        }
      },
      "calcSynthToToken(address,bytes32,uint8,uint256)": {
        "params": {
          "swap": "the address of a Saddle pool to use to swap the given token to a bridging synth",
          "synthInAmount": "the amount of the synth to swap form",
          "synthInKey": "the currency key of the synth to swap from",
          "tokenToIndex": "the index of the token to swap to"
        },
        "returns": {
          "_0": "the expected amount of the bridging synth and the expected amount of the desired token"
        }
      },
      "calcTokenToSynth(address,uint8,bytes32,uint256)": {
        "params": {
          "swap": "the address of a Saddle pool to use to swap the given token to a bridging synth",
          "synthOutKey": "the currency key of the desired synthetic asset",
          "tokenFromIndex": "the index of the token to swap from",
          "tokenInAmount": "the amount of the token to swap form"
        },
        "returns": {
          "_0": "the expected amount of the desired synth"
        }
      },
      "calcTokenToToken(address[2],uint8,uint8,uint256)": {
        "params": {
          "swaps": "the addresses of the two Saddle pools used to do the cross-asset swap",
          "tokenFromAmount": "the amount of the token to swap from",
          "tokenFromIndex": "the index of the token in the first `swaps` pool to swap from",
          "tokenToIndex": "the index of the token in the second `swaps` pool to swap to"
        },
        "returns": {
          "_0": "the expected amount of bridging synth at pre-settlement stage and the expected amount of the desired token"
        }
      },
      "completeToSynth(uint256)": {
        "params": {
          "itemId": "ERC721 token ID representing a pending `tokenToSynth` swap"
        }
      },
      "completeToToken(uint256,uint256,uint256,uint256)": {
        "params": {
          "deadline": "the timestamp representing the deadline for this transaction - reverts if deadline is not met",
          "itemId": "ERC721 token ID representing a pending `SynthToToken` or `TokenToToken` swap",
          "minAmount": "the minimum amount of the token to receive - reverts if this amount is not reached",
          "swapAmount": "the amount of bridging synth to swap from"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPendingSwapInfo(uint256)": {
        "params": {
          "itemId": "ID of the pending swap"
        },
        "returns": {
          "swapType": "the type of the pending virtual swap, secsLeft number of seconds left until this swap can be settled, synth address of the synth this swap uses, synthBalance amount of the synth this swap holds, tokenTo the address of the destination token"
        }
      },
      "getProxyAddressFromTargetSynthKey(bytes32)": {
        "params": {
          "synthKey": "the currency key of the synth"
        },
        "returns": {
          "_0": "address of the proxy contract"
        }
      },
      "getSynthAddress(address)": {
        "params": {
          "swap": "the address of the pool that contains the synth"
        },
        "returns": {
          "_0": "the address of the supported synth"
        }
      },
      "getSynthIndex(address)": {
        "params": {
          "swap": "the address of the pool that contains the synth"
        },
        "returns": {
          "_0": "the index of the supported synth"
        }
      },
      "getSynthKey(address)": {
        "params": {
          "swap": "the address of the pool that contains the synth"
        },
        "returns": {
          "_0": "the currency key of the supported synth"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setSynthIndex(address,uint8,bytes32)": {
        "params": {
          "currencyKey": "the currency key of the synth in bytes32 form",
          "swap": "the address of the pool that contains the synth",
          "synthIndex": "the index of the supported synth in the given `swap` pool"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "synthToToken(address,bytes32,uint8,uint256,uint256)": {
        "params": {
          "minMediumSynthAmount": "the minimum amount of the bridging synth at pre-settlement stage",
          "swap": "the address of a Saddle pool to use to swap the given token to a bridging synth",
          "synthInAmount": "the amount of the synth to swap form",
          "synthInKey": "the currency key of the synth to swap from",
          "tokenToIndex": "the index of the token to swap to"
        },
        "returns": {
          "_0": "the ID of the ERC721 token sent to the caller"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenToSynth(address,uint8,bytes32,uint256,uint256)": {
        "params": {
          "minAmount": "the amount of the token to swap form",
          "swap": "the address of a Saddle pool to use to swap the given token to a bridging synth",
          "synthOutKey": "the currency key of the desired synthetic asset",
          "tokenFromIndex": "the index of the token to swap from",
          "tokenInAmount": "the amount of the token to swap form"
        },
        "returns": {
          "_0": "ID of the ERC721 token sent to the caller"
        }
      },
      "tokenToToken(address[2],uint8,uint8,uint256,uint256)": {
        "params": {
          "minMediumSynthAmount": "the minimum amount of the bridging synth at pre-settlement stage",
          "swaps": "the addresses of the two Saddle pools used to do the cross-asset swap",
          "tokenFromAmount": "the amount of the token to swap from",
          "tokenFromIndex": "the index of the token in the first `swaps` pool to swap from",
          "tokenToIndex": "the index of the token in the second `swaps` pool to swap to"
        },
        "returns": {
          "_0": "the ID of the ERC721 token sent to the caller"
        }
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "the amount of the synth to withdraw",
          "itemId": "ID of the pending swap"
        }
      }
    },
    "title": "Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcCompleteToToken(uint256,uint256)": {
        "notice": "Calculates the expected amount of the token to receive on calling `completeToToken()` with the given `swapAmount`."
      },
      "calcSynthToToken(address,bytes32,uint8,uint256)": {
        "notice": "Calculates the expected amount of the desired token the caller will receive after completing a `SynthToToken` swap with the given parameters. This calculation does not consider the settlement periods or any potential changes of the `swap` pool composition."
      },
      "calcTokenToSynth(address,uint8,bytes32,uint256)": {
        "notice": "Calculates the expected amount of the desired synthetic asset the caller will receive after completing a `TokenToSynth` swap with the given parameters. This calculation does not consider the settlement periods."
      },
      "calcTokenToToken(address[2],uint8,uint8,uint256)": {
        "notice": "Calculates the expected amount of the desired token the caller will receive after completing a `TokenToToken` swap with the given parameters. This calculation does not consider the settlement periods or any potential changes of the pool compositions."
      },
      "completeToSynth(uint256)": {
        "notice": "Completes the pending `tokenToSynth` swap by settling and withdrawing the synthetic asset. Reverts if the given `itemId` does not represent a `tokenToSynth` swap."
      },
      "completeToToken(uint256,uint256,uint256,uint256)": {
        "notice": "Completes the pending `SynthToToken` or `TokenToToken` swap by settling the bridging synth and swapping it to the desired token. Only the owners of the pending swaps can call this function."
      },
      "constructor": "Deploys this contract and initializes the master version of the SynthSwapper contract. The address to the Synthetix protocol's Exchanger contract is also set on deployment.",
      "getPendingSwapInfo(uint256)": {
        "notice": "Returns various information of a pending swap represented by the given `itemId`. Information includes the type of the pending swap, the number of seconds left until it can be settled, the address and the balance of the synth this swap currently holds, and the address of the destination token."
      },
      "getProxyAddressFromTargetSynthKey(bytes32)": {
        "notice": "Returns the address of the proxy contract targeting the synthetic asset with the given `synthKey`."
      },
      "getSynthAddress(address)": {
        "notice": "Returns the address of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered."
      },
      "getSynthIndex(address)": {
        "notice": "Returns the index of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered."
      },
      "getSynthKey(address)": {
        "notice": "Returns the currency key of the supported synth in the given `swap` pool. Reverts if the `swap` pool is not registered."
      },
      "setSynthIndex(address,uint8,bytes32)": {
        "notice": "Registers the index and the address of the supported synth from the given `swap` pool. The matching currency key must be supplied for a successful registration."
      },
      "synthToToken(address,bytes32,uint8,uint256,uint256)": {
        "notice": "Initiates a cross-asset swap from a synthetic asset to a supported token. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap."
      },
      "tokenToSynth(address,uint8,bytes32,uint256,uint256)": {
        "notice": "Initiates a cross-asset swap from a token supported in the `swap` pool to any synthetic asset. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap."
      },
      "tokenToToken(address[2],uint8,uint8,uint256,uint256)": {
        "notice": "Initiates a cross-asset swap from a token in one Saddle pool to one in another. The caller will receive an ERC721 token representing their ownership of the pending cross-asset swap."
      },
      "updateExchangerCache()": {
        "notice": "Updates the stored address of the `EXCHANGER` contract. When the Synthetix team upgrades their protocol, a new Exchanger contract is deployed. This function manually updates the stored address."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Settles and withdraws the synthetic asset without swapping it to a token in a Saddle pool. Only the owner of the ERC721 token of `itemId` can call this function. Reverts if the given `itemId` does not represent a `synthToToken` or a `tokenToToken` swap."
      }
    },
    "notice": "This contract is responsible for cross-asset swaps using the Synthetix protocol as the bridging exchange. There are three types of supported cross-asset swaps, tokenToSynth, synthToToken, and tokenToToken. 1) tokenToSynth Swaps a supported token in a saddle pool to any synthetic asset (e.g. tBTC -> sAAVE). 2) synthToToken Swaps any synthetic asset to a suported token in a saddle pool (e.g. sDEFI -> USDC). 3) tokenToToken Swaps a supported token in a saddle pool to one in another pool (e.g. renBTC -> DAI). Due to the settlement periods of synthetic assets, the users must wait until the trades can be completed. Users will receive an ERC721 token that represents pending cross-asset swap. Once the waiting period is over, the trades can be settled and completed by calling the `completeToSynth` or the `completeToToken` function. In the cases of pending `synthToToken` or `tokenToToken` swaps, the owners of the pending swaps can also choose to withdraw the bridging synthetic assets instead of completing the swap.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1898,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3287,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)5653_storage)"
      },
      {
        "astId": 3289,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)5030_storage"
      },
      {
        "astId": 3293,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3299,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3301,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3303,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3307,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3309,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 15949,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "exchanger",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IExchanger)37699"
      },
      {
        "astId": 15980,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "pendingToSynthSwaps",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(PendingToSynthSwap)15999_storage)"
      },
      {
        "astId": 15984,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "pendingToTokenSwaps",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(PendingToTokenSwap)16008_storage)"
      },
      {
        "astId": 15986,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "pendingSwapsLength",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15990,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "pendingSwapType",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_enum(PendingSwapType)15954)"
      },
      {
        "astId": 15994,
        "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
        "label": "swapContracts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(SwapContractInfo)16018_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)3028)dyn_storage": {
        "base": "t_contract(IERC20)3028",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)4704_storage)dyn_storage": {
        "base": "t_struct(MapEntry)4704_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)3028": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchanger)37699": {
        "encoding": "inplace",
        "label": "contract IExchanger",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)23767": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(SynthSwapper)17755": {
        "encoding": "inplace",
        "label": "contract SynthSwapper",
        "numberOfBytes": "20"
      },
      "t_enum(PendingSwapType)15954": {
        "encoding": "inplace",
        "label": "enum Bridge.PendingSwapType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(SwapContractInfo)16018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bridge.SwapContractInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapContractInfo)16018_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)5653_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)5653_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(PendingSwapType)15954)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Bridge.PendingSwapType)",
        "numberOfBytes": "32",
        "value": "t_enum(PendingSwapType)15954"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingToSynthSwap)15999_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bridge.PendingToSynthSwap)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingToSynthSwap)15999_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingToTokenSwap)16008_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bridge.PendingToTokenSwap)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingToTokenSwap)16008_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Map)4712_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 4707,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)4704_storage)dyn_storage"
          },
          {
            "astId": 4711,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)4704_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 4701,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4703,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PendingToSynthSwap)15999_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.PendingToSynthSwap",
        "members": [
          {
            "astId": 15996,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "swapper",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(SynthSwapper)17755"
          },
          {
            "astId": 15998,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "synthKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PendingToTokenSwap)16008_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.PendingToTokenSwap",
        "members": [
          {
            "astId": 16001,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "swapper",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(SynthSwapper)17755"
          },
          {
            "astId": 16003,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "synthKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 16005,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "swap",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ISwap)23767"
          },
          {
            "astId": 16007,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "tokenToIndex",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5267_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5262,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5266,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapContractInfo)16018_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.SwapContractInfo",
        "members": [
          {
            "astId": 16010,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "synthIndexPlusOne",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 16012,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "synthAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16014,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "synthKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 16017,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_contract(IERC20)3028)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UintSet)5653_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5652,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5267_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)5030_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 5029,
            "contract": "contracts/VirtualSwap/Bridge.sol:Bridge",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)4712_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
