// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!
pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

interface IHeroFarmV3 {
event Compound(address indexed user, uint256 indexed pid, uint256 amount);
event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
event DepositNTF(address indexed user, uint256 indexed pid, uint256[] tokenIds);
event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
event EmergencyWithdrawNFT(address indexed user, uint256 indexed pid, uint256[] tokenIds);
event FeeExclude(address indexed user, bool exclude);
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
event Paused(address account);
event SkipEOA(address indexed user, bool skip);
event Unpaused(address account);
event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
event WithdrawNFT(address indexed user, uint256 indexed pid, uint256[] tokenIds);
function HERO() external view returns (address);
function HEROMaxSupply() external view returns (uint256);
function HERORewardPerSecond() external view returns (uint256);
function add(uint256 _allocPoint, address _want, uint8 _poolType, bool _withUpdate, address _strat) external;
function burnAddress() external view returns (address);
function calculateReward(uint256 _before, uint256 _now) external view returns (uint256);
function communityAddress() external view returns (address);
function communityRate() external view returns (uint256);
function compound(uint256 _pid) external;
function compoundNotFee() external view returns (bool);
function compoundPaused() external view returns (bool);
function deposit(uint256 _pid, uint256 _wantAmt, string memory _referName) external;
function depositNFT(uint256 _pid, uint256[] memory _tokenIds, string memory _referName) external;
function ecosystemAddress() external view returns (address);
function ecosystemRate() external view returns (uint256);
function emergencyWithdraw(uint256 _pid) external;
function emergencyWithdrawNFT(uint256 _pid, uint256[] memory _tokenIds) external;
function epochDuration() external view returns (uint256);
function epochReduceRate() external view returns (uint256);
function epochReward(uint256 _epoch) external view returns (uint256 reward);
function epochsLeft() external view returns (uint256);
function epochsPassed(uint256 _time) external view returns (uint256);
function erc20PoolRate() external view returns (uint256);
function erc721PoolRate() external view returns (uint256);
function feeAddress() external view returns (address);
function feeExclude(address) external view returns (bool);
function heroDistribution() external view returns (address);
function inCaseTokensGetStuck(address _token, uint256 _amount) external;
function initialize(address _hero, uint256 _heroRewardPerSecond, address[] memory _disAddresses) external;
function massUpdatePools() external;
function nftRewardRate() external view returns (uint256);
function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) external returns (bytes4);
function owner() external view returns (address);
function pause() external;
function paused() external view returns (bool);
function pendingHERO(uint256 _pid, address _user) external view returns (uint256);
function playerBook() external view returns (address);
function poolExistence(address) external view returns (bool);
function poolInfo(uint256) external view returns (address want,  uint8 poolType,  uint256 allocPoint,  uint256 lastRewardTime,  uint256 accHEROPerShare,  address strat);
function poolLength() external view returns (uint256);
function referralRate() external view returns (uint256);
function referrals(address) external view returns (address);
function renounceOwnership() external;
function reservedNFTFarmingAddress() external view returns (address);
function reservedNFTFarmingRate() external view returns (uint256);
function rewardDistribution() external view returns (address);
function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;
function setAddresses(address _reservedNFTFarmingAddress, address _teamAddress, address _communityAddress, address _ecosystemAddress) external;
function setCompoundNotFee(bool _notFee) external;
function setCompoundPaused(bool _paused) external;
function setEpochDuration(uint256 _epochDuration) external;
function setEpochReduceRate(uint256 _epochReduceRate) external;
function setFeeExclude(address _user) external;
function setHEROMaxSupply(uint256 _supply) external;
function setHeroDistribution(address _heroDistribution) external;
function setNftRewardRate(uint256 _rate) external;
function setPlaybook(address _playerBook, uint256 _referralRate) external;
function setRates(uint256 _teamRate, uint256 _communityRate, uint256 _ecosystemRate, uint256 _reservedNFTFarmingRate) external;
function setReferralRate(uint256 _referralRate) external;
function setRewardDistribution(address _rewardDistribution) external;
function setSkipEOA(address _user) external;
function setTotalEpoch(uint256 _totalEpoch) external;
function setWithdrawFee(address _feeAddress, bool _enable) external;
function skipEOA(address) external view returns (bool);
function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256);
function startAt(uint256 _startTime) external;
function startTime() external view returns (uint256);
function teamAddress() external view returns (address);
function teamRate() external view returns (uint256);
function totalAllocPoint(uint8) external view returns (uint256);
function totalEpoch() external view returns (uint256);
function transferOwnership(address newOwner) external;
function unpause() external;
function updatePool(uint256 _pid) external;
function userInfo(uint256 , address) external view returns (uint256 shares, uint256 rewardDebt, uint64 gracePeriod, uint64 lastDepositBlock);
function withdraw(uint256 _pid, uint256 _wantAmt) external;
function withdrawAll(uint256 _pid) external;
function withdrawFee() external view returns (bool);
function withdrawNFT(uint256 _pid, uint256[] memory _tokenIds) external;
}
